<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://blog.presidentbeef.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.presidentbeef.com/" rel="alternate" type="text/html" /><updated>2025-01-20T12:45:55-07:00</updated><id>https://blog.presidentbeef.com/feed.xml</id><title type="html">Justin’s Blurgh</title><subtitle></subtitle><entry><title type="html">Brakeman LSP Support</title><link href="https://blog.presidentbeef.com/blog/2025/01/10/brakeman-lsp-support/" rel="alternate" type="text/html" title="Brakeman LSP Support" /><published>2025-01-10T09:23:00-07:00</published><updated>2025-01-10T09:23:00-07:00</updated><id>https://blog.presidentbeef.com/blog/2025/01/10/brakeman-lsp-support</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2025/01/10/brakeman-lsp-support/"><![CDATA[<p>Announcing the <a href="https://github.com/presidentbeef/ruby-lsp-brakeman">ruby-lsp-brakeman</a> project!</p>

<p>This new gem allows Brakeman scans to be integrated into code editors via <a href="https://shopify.github.io/ruby-lsp/">ruby-lsp</a>. Scans will run asynchronously in the background and warnings will can be shown inline in the editor.</p>

<h2 id="using-ruby-lsp-brakeman">Using Ruby-LSP-Brakeman</h2>

<p>Add <code class="language-plaintext highlighter-rouge">ruby-lsp-brakeman</code> to your <code class="language-plaintext highlighter-rouge">Gemfile</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'ruby-lsp-brakeman'</span><span class="p">,</span> <span class="ss">require: </span><span class="kp">false</span>
</code></pre></div></div>

<h3 id="in-vs-code">In VS Code</h3>

<p>If using with VS Code, make sure to install the <a href="https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp">Ruby LSP extension</a>.</p>

<p><code class="language-plaintext highlighter-rouge">bundle install</code> and then restart the Ruby LSP extension to enable the add-on.</p>

<p>To double-check that Brakeman is running, examine the <code class="language-plaintext highlighter-rouge">output</code> tab in the VS Code panel for output like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[info] (example-app) Finished initializing Ruby LSP!
[info] (example-app) [Brakeman] Activated Ruby LSP Brakeman, running initial scan
[info] (example-app) [Brakeman] Initial Brakeman scan complete - 0 warnings found
</code></pre></div></div>

<p>When files are saved, there should be logs like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[info] (example-app) [Brakeman] Queued example-app/app/controllers/some_controller.rb
[info] (example-app) [Brakeman] Rescanning example-app/app/controllers/some_controller.rb
[info] (example-app) [Brakeman] Rescanned example-app/app/controllers/some_controller.rb
[info] (example-app) [Brakeman] Warnings: 0 new, 1 fixed, 2 total
</code></pre></div></div>

<p>Findings will show up with squiggly underlines:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqftm3nn87fekg79in2s.png" alt="Inline Brakeman warning in VS Code" /></p>

<h2 id="background-information">Background Information</h2>

<p>Just for those interested in what’s going on behind the scenes!</p>

<h3 id="language-server-protocol">Language Server Protocol</h3>

<p><a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol (LSP)</a> is a standard for communication between code editors and code-related tools. It enables tools to hook into standard events for code review, code completion, formatting, etc.</p>

<p>In the Ruby world, Shopify’s <code class="language-plaintext highlighter-rouge">ruby-lsp</code> provides a convenient implementation of LSP and the ability to build “add-ons” like <code class="language-plaintext highlighter-rouge">ruby-lsp-brakeman</code>.</p>

<h3 id="how-brakeman-is-integrated">How Brakeman is Integrated</h3>

<p>The Brakeman add-on primarily hooks into the file change monitoring, which is triggered when a file is saved or deleted. The file is then added to a queue for rescanning. All files in the queue will be rescanned in the next scan. This is to avoid either triggering multiple concurrent scans or missing file updates because a scan was already in progress.</p>

<p>When the scan is complete, the warnings are reported back as a “<a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnostic">diagnostic</a>” to be displayed in the editor.</p>

<p>Interestingly, it’s also necessary to return <em>empty</em> sets of diagnostics (per changed file) to clear any fixed warnings that were previously reported.</p>

<h3 id="brakeman-rescanning">Brakeman Rescanning</h3>

<p>Unlike some other code review or formatting tools, Brakeman works across the entire application, not one file at a time. Code in one file can have effects elsewhere in the application.</p>

<p>A long time ago, “rescanning”/incremental scans were added to Brakeman. To achieve this, Brakeman needs to keep the entire state of the scan in memory, then attempt to update only the relevant information as files change. (This is as opposed to running scans on only a subset of files or caching results offline somehow. Side note: do not use <code class="language-plaintext highlighter-rouge">--only-files</code> to try to make this work!)</p>

<p>To know what to update internally, Brakeman would try to guess based on the file that changed (including cascading effects). This was always pretty heavy on heuristics and not very well tested. But it kind of mostly worked!</p>

<p>All the way back in Brakeman 5.0, the scan implementation moved away from using file names and paths to determine the type of file (e.g., controllers vs. models) to using the contents of the file instead. However, the re-scanning was not updated to use this information. Since it was still operating based on file paths, it was no longer aligned with the files being scanned by Brakeman normally.</p>

<p>What all this means is that rescanning has been in a broken and slowly deteriorating state since Brakeman 5.0!</p>

<p>With Brakeman 7.0, rescanning has been revised. For now, rescanning focuses on caching parsed files and only re-parsing changed files. The rest of the scan starts from “scratch”. Finding, reading, and parsing files is often one of the slowest parts of scans, so this should still save time for most folks.</p>

<p>Since caching all the parsed files introduces a bit of memory overhead, the functionality is off by default. To enable, initial scans must be run with <code class="language-plaintext highlighter-rouge">support_rescanning: true</code>.</p>

<p>Hopefully future work will be able to expand out the “incremental” part of rescanning again.</p>

<h2 id="whats-next">What’s Next</h2>

<p>While the add-on generally works with VS Code, I’d love to polish it up a bit more and move to a 1.0 release.</p>

<p>I’m also considering if <code class="language-plaintext highlighter-rouge">ruby-lsp-brakeman</code> should depend on Brakeman, or if it should actually be a Brakeman dependency so everyone has it available by default. Let me know if you have thoughts on that.</p>

<p>Please help by testing out <a href="https://github.com/presidentbeef/ruby-lsp-brakeman">ruby-lsp-brakeman</a> and <a href="https://github.com/presidentbeef/ruby-lsp-brakeman">sharing any feedback/bugs</a>!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Announcing the ruby-lsp-brakeman project!]]></summary></entry><entry><title type="html">Tiny E-Ink Picture Display</title><link href="https://blog.presidentbeef.com/blog/2024/04/14/tiny-e-ink-picture-display/" rel="alternate" type="text/html" title="Tiny E-Ink Picture Display" /><published>2024-04-14T14:23:00-06:00</published><updated>2024-04-14T14:23:00-06:00</updated><id>https://blog.presidentbeef.com/blog/2024/04/14/tiny-e-ink-picture-display</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2024/04/14/tiny-e-ink-picture-display/"><![CDATA[<p>After being surprised by the capabilities of a three-color e-ink display (and struggling to get it to work!), I thought I’d put together a little guide.</p>

<h2 id="hardware">Hardware</h2>

<p>The hardware I used:</p>

<ul>
  <li><a href="https://www.adafruit.com/product/4947">Adafruit 2.13 E-Ink Tricolor Display (ThinkInk)</a></li>
  <li><a href="https://www.adafruit.com/product/3619">Adafruit ESP32 Feather (ESP32-WROOM-32E)</a></li>
  <li>A micro SD card</li>
</ul>

<p>In this case, I messed up a little. I already had an ESP32 feather board from Adafruit, so I should have grabbed an <a href="https://www.adafruit.com/product/4778">e-ink “feather wing”</a> which would have plugged straight into the ESP32 board.</p>

<p>But since I did not do that… here’s how I wired up the display:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">3V3</code> (power) to <code class="language-plaintext highlighter-rouge">3V</code></li>
  <li><code class="language-plaintext highlighter-rouge">GND</code> (ground) to <code class="language-plaintext highlighter-rouge">GND</code></li>
  <li><code class="language-plaintext highlighter-rouge">SCK</code> (clock) to <code class="language-plaintext highlighter-rouge">SCK</code></li>
  <li><code class="language-plaintext highlighter-rouge">MISO</code> to <code class="language-plaintext highlighter-rouge">MISO</code></li>
  <li><code class="language-plaintext highlighter-rouge">MOSI</code> to <code class="language-plaintext highlighter-rouge">MOSI</code></li>
  <li><code class="language-plaintext highlighter-rouge">ECS</code> to 27</li>
  <li><code class="language-plaintext highlighter-rouge">D/C</code> to 33</li>
  <li><code class="language-plaintext highlighter-rouge">SRCS</code> to 15</li>
  <li><code class="language-plaintext highlighter-rouge">SDCS</code> to 32</li>
</ul>

<p>The rest I didn’t connect.</p>

<p><em>Note: Don’t be tempted to use pins 12 and 13!! Pin 13 is actually shared with the onboard LED, and documentation for pin 12 says “this pin has a pull-down resistor built into it, we recommend using it as an output only”.</em></p>

<p>The names on the board don’t quite match the names in the code, so here’s a cheatsheet:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define EPD_DC 33     // D/C
#define EPD_CS 27     // ECS
#define SRAM_CS 15    // SRCS
#define EPD_BUSY -1   // can set to -1 to not use a pin
#define EPD_RESET -1  // can set to -1 and share with chip Reset (can't deep sleep)
#define SD_CS 32      // SDCS
</span></code></pre></div></div>

<p>The libraries use defaults for the rest of the pins automatically.</p>

<h2 id="setting-up-pictures">Setting Up Pictures</h2>

<p>To fit the display exactly, pictures should be 250 pixels x 122 pixels. However, the display will crop as needed.</p>

<p>I used Gimp and ImageMagick to make the pictures, but the main thing is the images need to be 24-bit bitmaps. I couldn’t get Gimp to save images directly to a working format.</p>

<p>Here are the steps I took:</p>

<ul>
  <li>In Gimp, crop and resize to 250x122 pixels (I prefer to crop, resize to 250 pixels wide, crop again to 122 pixels high.)</li>
  <li>Set palette:
    <ul>
      <li>Go to <code class="language-plaintext highlighter-rouge">Image</code> → <code class="language-plaintext highlighter-rouge">Mode</code> → <code class="language-plaintext highlighter-rouge">Indexed...</code></li>
      <li>Select “black and white 1 bit palette”</li>
      <li>OR create a new black/red/white palette and use that</li>
      <li>Choose a dithering option that looks good</li>
    </ul>
  </li>
</ul>

<p>As far as the color to use for “red”, I believe as long as it has the <code class="language-plaintext highlighter-rouge">r</code> value of <code class="language-plaintext highlighter-rouge">255</code>, it will work.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jofyf7mptsr4k2eyp2z9.png" alt="Gimp image mode" /></p>

<p>Then…</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">File</code> → <code class="language-plaintext highlighter-rouge">Export As...</code></li>
  <li>Rename to end in <code class="language-plaintext highlighter-rouge">.bmp</code> and save</li>
</ul>

<p>Then…</p>

<p>From the command line, run</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">convert your_image.bmp -type truecolor your_image_24.bmp</code></li>
</ul>

<h3 id="upload">Upload</h3>

<p>Save the pictures to the root directory of a micro SD card, then put the card in the display (for me, it’s text “down”). The slot is spring-loaded, so just push on the end to eject.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0796oc6oijha0y15p1qb.jpg" alt="Back of e-ink display showing micro SD card inserted" /></p>

<h2 id="arduino">Arduino</h2>

<p>I used the <a href="https://www.arduino.cc/en/software">Arduino IDE</a> (2.3.2).</p>

<p>For the board type, use “Adafruit ESP32 Feather”. (This may seem obvious, but it took me a while to figure out which to use!)</p>

<p>These are the libraries I used (via the IDE’s Library Manager):</p>

<ul>
  <li><a href="https://github.com/adafruit/Adafruit_ImageReader">Adafruit ImageReader library (v2.9.2)</a></li>
  <li><a href="https://github.com/adafruit/Adafruit_EPD">Adafruit EPD (v4.5.4)</a></li>
</ul>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq752bcbtwgk83dcnlus.png" alt="Arduino IDE" /></p>

<h2 id="code">Code</h2>

<p><a href="https://github.com/presidentbeef/e-ink-photo-frame">Full code is available here!</a></p>

<p>Other good examples to start from:</p>
<ul>
  <li><a href="https://github.com/adafruit/Adafruit_EPD/blob/6c7aff424af5fde45b14ee6acd2f0ce92f2f459d/examples/ThinkInk_tricolor/ThinkInk_tricolor.ino">Tricolor test</a></li>
  <li><a href="https://github.com/adafruit/Adafruit_ImageReader/blob/4588e481534d3f9319eb79f251595007e650c116/examples/EInkBreakouts/EInkBreakouts.ino">Image reader</a></li>
</ul>

<p>You’ll want to adjust the pin definitions like I did above if you are following along.</p>

<p><code class="language-plaintext highlighter-rouge">ThinkInk_213_Tricolor_RW</code> is the right type to use for the display above.</p>

<p>In my code, I stripped out anything not related to loading and displaying images from the SD card. If you are doing something different, try looking at the other examples.</p>

<p><strong>Update these lines with the names of your images!</strong></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span> <span class="n">num_images</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// Update with number of images</span>

  <span class="c1">// List image paths</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">images</span><span class="p">[</span><span class="n">num_images</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"/image1.bmp"</span><span class="p">,</span>
    <span class="s">"/image2.bmp"</span><span class="p">,</span>
    <span class="s">"/image3.bmp"</span><span class="p">,</span>
    <span class="s">"/image4.bmp"</span><span class="p">,</span>
  <span class="p">};</span>

</code></pre></div></div>

<p>The program will cycle through the images and update every 5 minutes (or whatever you change the delay to - recommended minimum is 3 minutes).</p>

<h2 id="results">Results</h2>

<p>Here are some examples. Images look best from a little distance.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osf9sondxhxm7oib1sgi.jpg" alt="E-ink display connected to ESP32; showing picture of a computer" /></p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/detw3xbclf3wtm6papmd.jpg" alt="E-ink display showing picture of a house" /></p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlo1mjodbwzp0oagii54.jpg" alt="E-ink display showing picture of a rhinoceros" /></p>

<h2 id="no-power">No Power?!</h2>

<p>Yep, the main cool thing about an e-ink display is that they don’t need power to maintain the image.</p>

<p>However, I found just removing power from the ESP32 would cause the red pixels to “bloom” and make everything a bit pink.</p>

<p>To prevent this, just disconnect power from the display first. It’s possible there is a way to fix this in the code - let me know if you figure it out!</p>

<h2 id="have-fun">Have Fun!</h2>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0d6hoyareg4noqn86fc.jpg" alt="E-ink display showing picture of a handsome fella" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[After being surprised by the capabilities of a three-color e-ink display (and struggling to get it to work!), I thought I’d put together a little guide.]]></summary></entry><entry><title type="html">DragonRuby: Deploying on Android</title><link href="https://blog.presidentbeef.com/blog/2024/03/12/dragonruby-deploying-on-android/" rel="alternate" type="text/html" title="DragonRuby: Deploying on Android" /><published>2024-03-12T14:22:00-06:00</published><updated>2024-03-12T14:22:00-06:00</updated><id>https://blog.presidentbeef.com/blog/2024/03/12/dragonruby-deploying-on-android</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2024/03/12/dragonruby-deploying-on-android/"><![CDATA[<p>This is a little less-polished-than-usual post about how to build/install Android applications with <a href="https://dragonruby.org/toolkit/game">DragonRuby <strong>Pro</strong></a>. on a Linux system. The higher tiers of features in DragonRuby tend to be less well-documented, so here is a bit of a braindump on getting games running on a real Android device.</p>

<p>(Mostly to remind myself how I did all this.)</p>

<h2 id="building-the-package">Building the Package</h2>

<p><em>To be clear, you will need the “Pro” version of DragonRuby to follow this guide.</em></p>

<p>Running</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dragonruby-publish --package
</code></pre></div></div>

<p>will generate binaries and packages for all supported platforms and dump them in <code class="language-plaintext highlighter-rouge">builds/</code>.</p>

<h2 id="signing">Signing</h2>

<h3 id="creating-a-keystore">Creating a Keystore</h3>

<p>Following the DragonRuby documentation, create a keystore file like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keytool -genkey -v -keystore YOUR_APP.keystore -alias your_app_name -keyalg RSA -keysize 2048 -validity 10000
</code></pre></div></div>

<p>This will generate a file called <code class="language-plaintext highlighter-rouge">YOUR_APP.keystore</code>.</p>

<p><code class="language-plaintext highlighter-rouge">keytool</code> is probably already on your system, but if not you’ll need to install a Java JDK package using your system tools.</p>

<h3 id="getting-apksigner">Getting apksigner</h3>

<p>To install the package on your Android device, you’ll need to sign the <code class="language-plaintext highlighter-rouge">.apk</code> build using <code class="language-plaintext highlighter-rouge">apksigner</code>. I’m only going to cover one specific way of getting this program on Linux. Your experience may vary.</p>

<p>The easiest way to get <code class="language-plaintext highlighter-rouge">apksigner</code> is probably to install <a href="https://developer.android.com/studio/">Android Studio</a> and go from there. However, I prefer doing things the hard way (and not installing a whole IDE to get one binary…)</p>

<p>First, go to <a href="https://developer.android.com/studio/">https://developer.android.com/studio</a> and scroll <em>allll</em> the way to the bottom to “Command line tools only”. Grab the .zip file from there.</p>

<p>Unzip it and find the <code class="language-plaintext highlighter-rouge">sdkmanager</code> binary, likely in <code class="language-plaintext highlighter-rouge">latest/bin</code>.</p>

<p>Run <code class="language-plaintext highlighter-rouge">./sdkmanager --list | grep build-tools</code> to find the latest version of <code class="language-plaintext highlighter-rouge">build-tools</code>.</p>

<p>Then run something like <code class="language-plaintext highlighter-rouge">./sdkmanager --install "build-tools;34.0.0"</code> to install.</p>

<p>The files will probably end up somewhere like <code class="language-plaintext highlighter-rouge">../../../build-tools</code>. In there you’ll find <code class="language-plaintext highlighter-rouge">apksigner</code>!</p>

<h3 id="signing-the-package">Signing the Package</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apksigner sign -ks YOUR_APP.keystore builds/YOUR-GAME-android.apk
</code></pre></div></div>

<p>You’ll need to figure out paths for <code class="language-plaintext highlighter-rouge">apksigner</code>, <code class="language-plaintext highlighter-rouge">YOUR_APP.keystore</code>, etc.</p>

<p>See the <a href="https://docs.dragonruby.org/#/guides/deploying-to-mobile?id=deploying-to-android">official docs</a> for more, especially if publishing to the Google Play store.</p>

<h2 id="installing-on-device">Installing on Device</h2>

<h3 id="enable-debug-mode">Enable Debug Mode</h3>

<p>On your Android device setup developer options, enable <a href="https://developer.android.com/studio/debug/dev-options">USB debug mode</a>, and plug your device into your computer.</p>

<p>On Linux, you may need to figure out permissions. <a href="https://www.janosgyerik.com/adding-udev-rules-for-usb-debugging-android-devices/">Here’s a post with instructions</a> that worked for me.</p>

<h3 id="getting-adb">Getting adb</h3>

<p>The <code class="language-plaintext highlighter-rouge">adb</code> tool can be downloaded as part of the <a href="https://developer.android.com/tools/releases/platform-tools#downloads.html">SDK Platform tools here.</a></p>

<h3 id="install-the-apk">Install the APK</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb install builds/your-game-android.apk
</code></pre></div></div>

<h2 id="viewing-logs">Viewing Logs</h2>

<p>To view logs from the device:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb logcat -e your-game
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">your-game</code> is the <code class="language-plaintext highlighter-rouge">gameid</code> or <code class="language-plaintext highlighter-rouge">packageid</code> configured in <code class="language-plaintext highlighter-rouge">mygame/metadata/game_metadata.txt</code>.</p>

<h2 id="remote-hotload">Remote Hotload</h2>

<p>Building, signing, and installing packages becomes a bit painful if you are doing all that during development.</p>

<p>How about hot-loading code on your Android device just like you can on your development machine?</p>

<h3 id="setup">Setup</h3>

<p>When running <code class="language-plaintext highlighter-rouge">dragonruby</code>, it opens up a webserver on port 9001. Besides what’s obviously visible on the webpage, it’s also how your device can connect and load code dynamically.</p>

<p>For that all to work, your development machine and Android device need to be on the same network, and your firewall needs to allow TCP connections on port <code class="language-plaintext highlighter-rouge">9001</code>.</p>

<p>To verify it’s working, try opening up your development machines IP on port 9001 from your Android device (e.g., visit <code class="language-plaintext highlighter-rouge">https://YOUR.DEV.IP:9001</code> in a browser).</p>

<h3 id="building">Building</h3>

<p>Run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dragonruby-publish --package-with-remote-hotload
</code></pre></div></div>

<p>To create a hotloading version of the game, then sign+install like above.</p>

<h3 id="running">Running</h3>

<p>Make sure your are running <code class="language-plaintext highlighter-rouge">dragonruby</code> locally on your development machine.</p>

<p>Then open your game on your mobile device - it should flash “Remote hotload enabled” at the bottom if it has been built properly. This does <em>not</em> ensure it actually connected to the development server, though!</p>

<p>To test, try making a visible change to a file on your local machine and see if the change is reflected on the Android device.</p>

<p>Somehow, magically, the hot-loaded changes will persist even through restarts. However, only changes made while the development server is running will be picked up.</p>

<h2 id="bonus-detecting-the-back-button">Bonus: Detecting the “Back” “Button”</h2>

<p>I am old, so I still use the virtual “back” button on Android.</p>

<p>In DragonRuby, this can be detected with</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">key_down</span><span class="p">.</span><span class="nf">ac_back</span>
</code></pre></div></div>

<p>For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">key_down</span><span class="p">.</span><span class="nf">ac_back</span>
  <span class="n">gtk</span><span class="p">.</span><span class="nf">request_quit</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[This is a little less-polished-than-usual post about how to build/install Android applications with DragonRuby Pro. on a Linux system. The higher tiers of features in DragonRuby tend to be less well-documented, so here is a bit of a braindump on getting games running on a real Android device.]]></summary></entry><entry><title type="html">DragonRuby: Following the Mouse</title><link href="https://blog.presidentbeef.com/blog/2023/12/22/dragonruby-following-the-mouse/" rel="alternate" type="text/html" title="DragonRuby: Following the Mouse" /><published>2023-12-22T14:18:00-07:00</published><updated>2023-12-22T14:18:00-07:00</updated><id>https://blog.presidentbeef.com/blog/2023/12/22/dragonruby-following-the-mouse</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2023/12/22/dragonruby-following-the-mouse/"><![CDATA[<p>Recently I discovered it is very easy to have objects move towards (or away from) any points in <a href="https://dragonruby.org/toolkit/game">DragonRuby</a>.</p>

<p>This post might be a little easier if you’ve already read my post on <a href="https://dev.to/presidentbeef/dragonruby-moving-in-arbitrary-directions-5eja">moving in arbitrary directions</a>, but actually the code here is even simpler.</p>

<p>If I skip any explanations here, the concepts should have been covered <a href="https://dev.to/presidentbeef/series/16166">earlier in the series</a>.</p>

<h3 id="setup">Setup</h3>

<p>To get started, let’s just output a square (roughly) in the middle of the screen.</p>

<p><code class="language-plaintext highlighter-rouge">args.grid.center_x</code> and <code class="language-plaintext highlighter-rouge">args.grid.center_y</code> are helpful for this instead of remembering/hardcoding the screen size.</p>

<p>In addition, the code uses <code class="language-plaintext highlighter-rouge">args.state.tick_count == 0</code> to do some setup on the first tick.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="c1"># On the first tick...</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="c1"># Create a 50x50 pixel square in the middle of the screen</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span> <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span> <span class="ss">h: </span><span class="mi">50</span><span class="p">,</span> <span class="ss">w: </span><span class="mi">50</span><span class="p">}</span>

    <span class="c1"># Output that square on every tick</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">static_solids</span> <span class="o">&lt;&lt;</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/durocwoj9tj6uzzfdp5x.png" alt="A square in the middle of a window" /></p>

<p>Pretty basic!</p>

<p>(Note I’m skipping straight to <a href="https://dev.to/presidentbeef/dragonruby-static-outputs-p2c"><code class="language-plaintext highlighter-rouge">static_solids</code></a> because that’s what I’d prefer in a “real” game.)</p>

<h3 id="moving-to-a-point">Moving to a Point</h3>

<p>Now we’ll move the “player” to a given point - in this case where the mouse is. In typical DragonRuby fashion, <code class="language-plaintext highlighter-rouge">args.inputs.mouse</code> can be used to as a point, even though it has a bunch of other information attached to it.</p>

<p>To get the angle from the player to the mouse, there is a very convenient <code class="language-plaintext highlighter-rouge">angle_to</code> method! (Also <code class="language-plaintext highlighter-rouge">angle_from</code> depending on which way you’d like to go.)</p>

<p>Just like <code class="language-plaintext highlighter-rouge">args.inputs.mouse</code>, the <code class="language-plaintext highlighter-rouge">player</code> solid can be treated as if it is a point, too.</p>

<p>One the angle is calculated, <code class="language-plaintext highlighter-rouge">vector_x</code> and <code class="language-plaintext highlighter-rouge">vector_y</code> will provide the magnitude to move in the <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> directions.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>
      <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>
      <span class="ss">h: </span><span class="mi">50</span><span class="p">,</span>
      <span class="ss">w: </span><span class="mi">50</span>
    <span class="p">}</span>

    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">static_solids</span> <span class="o">&lt;&lt;</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span>
  <span class="k">end</span>

  <span class="c1"># Find angle from the square to the current location of the mouse</span>
  <span class="n">angle</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span><span class="p">.</span><span class="nf">angle_to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">mouse</span><span class="p">)</span>
  
  <span class="c1"># Move towards the mouse using the unit vector</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span><span class="p">.</span><span class="nf">x</span> <span class="o">+=</span> <span class="n">angle</span><span class="p">.</span><span class="nf">vector_x</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span><span class="p">.</span><span class="nf">y</span> <span class="o">+=</span> <span class="n">angle</span><span class="p">.</span><span class="nf">vector_y</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh6qfnxypx8f744jrkww.gif" alt="Square following the mouse around" /></p>

<p>And… that’s it!! Less than 10 lines of code (without comments/spaces) and it just works.</p>

<p><em>So now let’s make it more complicated…</em></p>

<h3 id="centering">Centering</h3>

<p>It is annoying that the player moves so the <em>bottom, right-hand</em> corner meets the mouse, there is a simple fix: use <code class="language-plaintext highlighter-rouge">anchor_x</code> and <code class="language-plaintext highlighter-rouge">anchor_y</code>. DragonRuby will automatically use the anchor point for calculations.</p>

<p>To learn more about anchor points, see this <a href="https://dev.to/presidentbeef/smoothly-growing-and-shrinking-sprites-in-dragonruby-53d1">earlier post</a>. But typically the values are set to <code class="language-plaintext highlighter-rouge">0.5</code> which means “middle of the object”.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>
      <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>
      <span class="ss">h: </span><span class="mi">50</span><span class="p">,</span>
      <span class="ss">w: </span><span class="mi">50</span><span class="p">,</span>
      <span class="ss">anchor_x: </span><span class="mf">0.5</span><span class="p">,</span>
      <span class="ss">anchor_y: </span><span class="mf">0.5</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">static_solids</span> <span class="o">&lt;&lt;</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span>
  <span class="k">end</span>

  <span class="n">angle</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span><span class="p">.</span><span class="nf">angle_to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">mouse</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span><span class="p">.</span><span class="nf">x</span> <span class="o">+=</span> <span class="n">angle</span><span class="p">.</span><span class="nf">vector_x</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">player</span><span class="p">.</span><span class="nf">y</span> <span class="o">+=</span> <span class="n">angle</span><span class="p">.</span><span class="nf">vector_y</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0brhvw3f6clhe1jizpjf.gif" alt="Square following the mouse around, but centered" /></p>

<h3 id="moving-to-classes">Moving to Classes</h3>

<p>I continue to prefer taking an object/class-based approach in my own code. This makes it much easier to manage as the code grows larger, even if it seems silly for these small examples.</p>

<p>In a little departure from previous posts, I am not walking through the code in detail. (Please check out my other posts in this series to learn more!)</p>

<p>The main difference from the above is adding a <code class="language-plaintext highlighter-rouge">speed</code> to the movement calculation. Other than that, this is how I generally move from simple code like the above into a structure more suitable (in my opinion) as the code.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Game</span>
  <span class="n">attr_gtk</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="c1"># Separate setup method is easier if you need to</span>
    <span class="c1"># reset during the game</span>
    <span class="n">setup</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">setup</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="c1"># Since static_sprites persists between ticks,</span>
    <span class="c1"># need to clear it in case of reset</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">static_sprites</span><span class="p">.</span><span class="nf">clear</span>

    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span> <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span> <span class="ss">h: </span><span class="mi">50</span><span class="p">,</span> <span class="ss">w: </span><span class="mi">50</span><span class="p">,</span> <span class="ss">speed: </span><span class="mi">2</span><span class="p">)</span>

    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">static_sprites</span> <span class="o">&lt;&lt;</span> <span class="vi">@player</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="vi">@player</span><span class="p">.</span><span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Player</span>
  <span class="n">attr_sprite</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">:,</span> <span class="n">y</span><span class="p">:,</span> <span class="n">h</span><span class="p">:,</span> <span class="n">w</span><span class="p">:,</span> <span class="n">speed</span><span class="p">:)</span>
    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
    <span class="vi">@h</span> <span class="o">=</span> <span class="n">h</span>
    <span class="vi">@w</span> <span class="o">=</span> <span class="n">w</span>
    <span class="vi">@anchor_x</span> <span class="o">=</span> <span class="mf">0.5</span>
    <span class="vi">@anchor_y</span> <span class="o">=</span> <span class="mf">0.5</span>
    <span class="vi">@speed</span> <span class="o">=</span> <span class="n">speed</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="n">angle</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="nf">angle_to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">mouse</span><span class="p">)</span>

    <span class="vi">@x</span> <span class="o">+=</span> <span class="n">angle</span><span class="p">.</span><span class="nf">vector_x</span> <span class="o">*</span> <span class="vi">@speed</span>
    <span class="vi">@y</span> <span class="o">+=</span> <span class="n">angle</span><span class="p">.</span><span class="nf">vector_y</span> <span class="o">*</span> <span class="vi">@speed</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="vg">$Game</span> <span class="o">||=</span> <span class="no">Game</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="vg">$Game</span><span class="p">.</span><span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>One minor note if you actually run this code - the square will be white (default for sprites) instead of black (default for solids).</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Recently I discovered it is very easy to have objects move towards (or away from) any points in DragonRuby.]]></summary></entry><entry><title type="html">DragonRuby: Smoothly Growing and Shrinking Sprites</title><link href="https://blog.presidentbeef.com/blog/2023/07/06/dragonruby-smoothly-growing-and-shrinking-sprites/" rel="alternate" type="text/html" title="DragonRuby: Smoothly Growing and Shrinking Sprites" /><published>2023-07-06T14:17:00-06:00</published><updated>2023-07-06T14:17:00-06:00</updated><id>https://blog.presidentbeef.com/blog/2023/07/06/dragonruby-smoothly-growing-and-shrinking-sprites</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2023/07/06/dragonruby-smoothly-growing-and-shrinking-sprites/"><![CDATA[<p>This post is about <a href="https://dragonruby.org/toolkit/game">DragonRuby</a>, a Ruby implementation for writing games. Check it out!</p>

<h2 id="starting-off">Starting Off</h2>

<p>Let’s start simply by rendering a sprite in the middle of the window. For convenience, the program also renders guidelines marking the center of the window (for brevity, not showing this in later code). Also for convenience, this code uses a sprite included with the DragonRuby distribution.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># Double size of the original sprite, in pixels</span>
  <span class="n">width</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="n">height</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>

  <span class="c1"># Output sprite in middle of the window</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span> <span class="c1"># Horizontal center</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span> <span class="c1"># Vertical center</span>
    <span class="ss">w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/hexagon/red.png'</span><span class="p">,</span>
  <span class="p">}</span>

  <span class="c1"># Add grid lines to mark center of window</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">lines</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>
    <span class="ss">x2: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">w</span><span class="p">,</span>
    <span class="ss">y2: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span>
  <span class="p">}</span> <span class="o">&lt;&lt;</span>
  <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">x2: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>
    <span class="ss">y2: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">h</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvi2vdzdkylrg1em8j1m.png" alt="Off-center rendering of a red hexagon" /></p>

<p>As you can see, we’ve perfectly rendered a sprite in the center of the -</p>

<p>Wait, that’s not quite right. What happened?</p>

<h2 id="anchoring">Anchoring</h2>

<p>In DragonRuby, the (0, 0) coordinate is the bottom-left of the window. Similarly, when setting <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> location for a sprite, those correspond to the bottom-left of the sprite.</p>

<p>This could be solved with some math like <code class="language-plaintext highlighter-rouge">x = x + (sprite.w / 2)</code> to adjust the sprite appropriately. But this will cause complications later when resizing the sprite.</p>

<p>Preview of the problem:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqmm70ud4cgikzot23y5.gif" alt="Hexagon growing and shrinking off-center" /></p>

<p>This <em>might</em> be what you want, but for this post we want the sprite to expand/shrink from the center.</p>

<p>A simpler approach that trying to move <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> around is to instead use the <code class="language-plaintext highlighter-rouge">anchor_x</code> and <code class="language-plaintext highlighter-rouge">anchor_y</code> attributes.</p>

<p><strong>Important note: <code class="language-plaintext highlighter-rouge">anchor_*</code> attributes were introduced in DragonRuby 4.8.</strong></p>

<p>These are very similar to the <code class="language-plaintext highlighter-rouge">angle_anchor_*</code> attributes <a href="https://dev.to/presidentbeef/dragonruby-rotating-rectangles-2i9e/">discussed previously</a>.</p>

<p>The values used for the anchors are a <em>percentage</em> of the width or height of the sprite. This diagram from the earlier post might help:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwlbn5o29zou5qvpf7ug.png" alt="Angle anchors on a black rectangle" /></p>

<p>The default “anchors” are essentially at (0, 0) (technically, they are <code class="language-plaintext highlighter-rouge">nil</code>, but never mind that).</p>

<p>The center of the sprite is at (0.5, 0.5).</p>

<p>In code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># Double size of the original sprite</span>
  <span class="n">width</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="n">height</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>

  <span class="c1"># Actually render sprite in middle of the window</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">anchor_x: </span><span class="mf">0.5</span><span class="p">,</span>
    <span class="ss">anchor_y: </span><span class="mf">0.5</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/hexagon/red.png'</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y228g59elua7p9d7fyxm.png" alt="Red hexagon centered in window" /></p>

<p>There we go! Digression over, back to squishing and stretching this sprite.</p>

<h3 id="simple-approach">“Simple” Approach</h3>

<p>For the first approach, let’s do this:</p>

<ul>
  <li>Set a rate of growth (e.g. 1 pixel per tick)</li>
  <li>Set a target size</li>
  <li>Grow (or shrink) the size on each tick</li>
  <li>When the target size is met, reverse direction</li>
</ul>

<p>To avoid some duplication, this code uses the same size for width and height. Adjust as desired.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># How big to make the sprite</span>
  <span class="n">target_size</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>

  <span class="c1"># Current size of the sprite</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">size</span> <span class="o">||=</span> <span class="mi">0</span>

  <span class="c1"># How fast to grow</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">growth_rate</span> <span class="o">||=</span> <span class="mi">1</span>

  <span class="c1"># If the target size is reached, reverse</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">size</span> <span class="o">&gt;=</span> <span class="n">target_size</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">growth_rate</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">elsif</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">size</span> <span class="o">&lt;=</span> <span class="mi">0</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">growth_rate</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">end</span>

  <span class="c1"># Grow (or shrink) the size</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">size</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">growth_rate</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">size</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">size</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/hexagon/red.png'</span><span class="p">,</span>
    <span class="ss">anchor_x: </span><span class="mf">0.5</span><span class="p">,</span>
    <span class="ss">anchor_y: </span><span class="mf">0.5</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Result:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c233nxl7im2qxmi87pmx.gif" alt="Red hexagon growing and shrinking in the center of the window" /></p>

<p>Nailed it. Post over..?</p>

<h3 id="easing-in">Easing In</h3>

<p>Instead of calculating the growth rate “by hand,” wouldn’t it be nice if a function could do that for us? Maybe even have the ability to vary the growth rate over time?</p>

<p><code class="language-plaintext highlighter-rouge">args.easing.ease</code> is here for that very reason.</p>

<p>(<a href="https://www.youtube.com/watch?v=mr5xkf6zSzk">This video</a>, linked in the DragonRuby docs, is <em>really</em> good. Plus it also will explain the names of the easing functions used below.)</p>

<p><code class="language-plaintext highlighter-rouge">args.easing.ease</code> will return a “percentage” value (between 0 and 1) which can be multiplied against the target value to get the current value. For the example here, that means it will calculate the current percentage of the size of the the sprite.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="n">target_size</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="n">duration</span> <span class="o">=</span> <span class="mi">60</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span> <span class="o">||=</span> <span class="mi">0</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_function</span> <span class="o">=</span> <span class="ss">:identity</span>

  <span class="c1"># Calculate percentage (0 to 1) of progress based</span>
  <span class="c1"># on the start time, current time, duration, and easing function</span>
  <span class="n">percentage</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">easing</span><span class="p">.</span><span class="nf">ease</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span><span class="p">,</span>
                                <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span><span class="p">,</span>
                                <span class="n">duration</span><span class="p">,</span>                         
                                <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_function</span>

  <span class="c1"># Output the scaled image</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">target_size</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">target_size</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/hexagon/red.png'</span><span class="p">,</span>
    <span class="ss">anchor_x: </span><span class="mf">0.5</span><span class="p">,</span>
    <span class="ss">anchor_y: </span><span class="mf">0.5</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This code uses the <code class="language-plaintext highlighter-rouge">:identity</code> function which is linear - essentially the same as the earlier code that adds a constant “growth rate” on each tick.</p>

<p>Here is the result:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eugztn22l0aq6j95olyt.gif" alt="Red hexagon growing, but not shrinking" /></p>

<p>Oops, forgot to shrink it back down!</p>

<h3 id="easing-out">Easing Out</h3>

<p>The code is going to get slightly more complicated now. Instead of passing in a single easing function, the new code uses an array of function names. The array is “splatted” into <code class="language-plaintext highlighter-rouge">args.ease.easing</code>.</p>

<p>When the set duration is up, the code adds <code class="language-plaintext highlighter-rouge">:flip</code> to the list of functions. Instead of going from 0 to 1, the percentage will now go from 1 to 0.</p>

<p>When that’s over, <code class="language-plaintext highlighter-rouge">:flip</code> is removed from the list and it starts all over.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="n">target_size</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="n">duration</span> <span class="o">=</span> <span class="mi">60</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span> <span class="o">||=</span> <span class="mi">0</span>
                                                                               
  <span class="c1"># List of easing functions                                                   </span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">||=</span> <span class="p">[</span><span class="ss">:identity</span><span class="p">]</span>                                  
                                                                               
  <span class="c1"># Calculate percentage (0 to 1) of progress based                            </span>
  <span class="c1"># on the start time, current time, duration, and easing function(s)          </span>
  <span class="n">percentage</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">easing</span><span class="p">.</span><span class="nf">ease</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span><span class="p">,</span>                         
                                      <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span><span class="p">,</span>                   
                                      <span class="n">duration</span><span class="p">,</span>                                
                                      <span class="o">*</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span>             
                                                                               
  <span class="c1"># When we reach the end of the duration, switch direction                    </span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">==</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span> <span class="o">+</span> <span class="n">duration</span>                 
    <span class="c1"># Reset the start time for the easing function</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span>                              
                                                                               
    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">==</span> <span class="p">[</span><span class="ss">:identity</span><span class="p">]</span>                              
      <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:identity</span><span class="p">,</span> <span class="ss">:flip</span><span class="p">]</span>                         
    <span class="k">else</span>                                                                       
      <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:identity</span><span class="p">]</span>                                
    <span class="k">end</span>                                                                        
  <span class="k">end</span>                                                                          
                                                                               
  <span class="c1"># Output the scaled image                                                    </span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>                                                    
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>                                                     
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>                                                     
    <span class="ss">w: </span><span class="n">target_size</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">,</span>                                               
    <span class="ss">h: </span><span class="n">target_size</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">,</span>                                               
    <span class="ss">path: </span><span class="s1">'sprites/hexagon/red.png'</span><span class="p">,</span>                                           
    <span class="ss">anchor_x: </span><span class="mf">0.5</span><span class="p">,</span>                                                             
    <span class="ss">anchor_y: </span><span class="mf">0.5</span><span class="p">,</span>                                                             
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uje6fhszquw966wcsl7o.gif" alt="Red hexagon growing and shrinking" /></p>

<p>One way to think of <code class="language-plaintext highlighter-rouge">[:identity, :flip]</code> is like this:</p>

<p><code class="language-plaintext highlighter-rouge">:identity</code> is <em>f(x) = x</em> and <code class="language-plaintext highlighter-rouge">:identity, :flip</code> is <em>g(x) = 1 - f(x)</em>. <code class="language-plaintext highlighter-rouge">:flip</code> can be used to “reverse” any function.</p>

<h3 id="more-easing">More Easing</h3>

<p>This may not be <em>very</em> exciting, but keep in mind there are several pre-defined easing functions:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:identity</code> (f(x) = x)</li>
  <li><code class="language-plaintext highlighter-rouge">:quad</code> (f(x) = x^2)</li>
  <li><code class="language-plaintext highlighter-rouge">:cube</code> (f(x) = x^3)</li>
  <li><code class="language-plaintext highlighter-rouge">:quint</code> (f(x) = x^4)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_start_quad</code> (same as <code class="language-plaintext highlighter-rouge">:quad</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_start_cube</code> (same as <code class="language-plaintext highlighter-rouge">:cube</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_start_quart</code> (same as <code class="language-plaintext highlighter-rouge">:quart</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_start_quint</code> (same as <code class="language-plaintext highlighter-rouge">:quint</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_stop_quad</code> (f(x) = 1 - (1 - x)^2)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_stop_cube</code> (f(x) = 1 - (1 - x)^3)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_stop_quart</code> (f(x) = 1 - (1 - x)^4)</li>
  <li><code class="language-plaintext highlighter-rouge">:smooth_stop_quint</code> (f(x) = 1 - (1 - x)^5)</li>
</ul>

<p>Mix and match as you’d like… for example, here’s growing with <code class="language-plaintext highlighter-rouge">:cube</code> but shrinking with <code class="language-plaintext highlighter-rouge">:quint</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="n">target_size</span> <span class="o">=</span> <span class="mi">80</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="n">duration</span> <span class="o">=</span> <span class="mi">60</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span> <span class="o">||=</span> <span class="mi">0</span>
                                                                               
  <span class="c1"># List of easing functions                                                   </span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">||=</span> <span class="p">[</span><span class="ss">:cube</span><span class="p">]</span>                                  
                                                                               
  <span class="c1"># Calculate percentage (0 to 1) of progress based                            </span>
  <span class="c1"># on the start time, current time, duration, and easing function(s)          </span>
  <span class="n">percentage</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">easing</span><span class="p">.</span><span class="nf">ease</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span><span class="p">,</span>                         
                                <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span><span class="p">,</span>                   
                                <span class="n">duration</span><span class="p">,</span>                                
                                <span class="o">*</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span>             
                                                                               
  <span class="c1"># When we reach the end of the duration, switch direction                    </span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">==</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span> <span class="o">+</span> <span class="n">duration</span>                 
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">start_time</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span>                              
                                                                               
    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">==</span> <span class="p">[</span><span class="ss">:cube</span><span class="p">]</span>                              
      <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:quint</span><span class="p">,</span> <span class="ss">:flip</span><span class="p">]</span>                         
    <span class="k">else</span>                                                                       
      <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">easing_functions</span> <span class="o">=</span> <span class="p">[</span><span class="ss">:cube</span><span class="p">]</span>                                
    <span class="k">end</span>                                                                        
  <span class="k">end</span>                                                                          
                                                                               
  <span class="c1"># Output the scaled image                                                    </span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>                                                    
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span>                                                     
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">,</span>                                                     
    <span class="ss">w: </span><span class="n">target_size</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">,</span>                                               
    <span class="ss">h: </span><span class="n">target_size</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">,</span>                                               
    <span class="ss">path: </span><span class="s1">'sprites/hexagon/red.png'</span><span class="p">,</span>                                           
    <span class="ss">anchor_x: </span><span class="mf">0.5</span><span class="p">,</span>                                                             
    <span class="ss">anchor_y: </span><span class="mf">0.5</span><span class="p">,</span>                                                             
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9qmcrd0kpg8lnj95nq8.gif" alt="Hexagon growing, but then shrinking faster than it grew" /></p>

<h3 id="closing-out">Closing Out</h3>

<p>This post demonstrates two concepts: changing the anchors for a sprite, and using “easing” to set the size of a sprite.</p>

<p>Easing is a general-purpose concept that can be used for any applications, such as smooth movement.</p>

<p>Keep in mind, you can also:</p>

<ul>
  <li>Change up the anchors</li>
  <li>Grow/shrink width and height separately</li>
  <li>Change up the target width/height as desired (for example, grow all the way but only shrink back a little)</li>
  <li><a href="https://docs.dragonruby.org/#/api/easing?id=combining-easing-definitions">Combine several easing functions together</a></li>
  <li><a href="https://docs.dragonruby.org/#/api/easing?id=custom-easing-functions">Write your own easing functions</a></li>
  <li>???</li>
</ul>

<p>Have fun!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[This post is about DragonRuby, a Ruby implementation for writing games. Check it out!]]></summary></entry><entry><title type="html">DragonRuby: Moving in Arbitrary Directions</title><link href="https://blog.presidentbeef.com/blog/2022/11/15/dragonruby-moving-in-arbitrary-directions/" rel="alternate" type="text/html" title="DragonRuby: Moving in Arbitrary Directions" /><published>2022-11-15T14:09:00-07:00</published><updated>2022-11-15T14:09:00-07:00</updated><id>https://blog.presidentbeef.com/blog/2022/11/15/dragonruby-moving-in-arbitrary-directions</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2022/11/15/dragonruby-moving-in-arbitrary-directions/"><![CDATA[<p>In a <a href="https://dev.to/presidentbeef/dragonruby-rotating-rectangles-2i9e">previous post</a> we looked at rotating rectangles in <a href="https://dragonruby.org/toolkit/game">DragonRuby</a>.</p>

<p>Now let’s take that one step further to try turning <em>and moving</em>!</p>

<p>In this post, we’ll look at very simple movement of a spaceship.</p>

<h2 id="setup">Setup</h2>

<p>First, let’s get the state all ready.</p>

<p>The code below puts the sprite of a ship in the middle of the screen.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># Setting up initial state</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">||=</span> <span class="mi">0</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">||=</span> <span class="mi">0</span>

  <span class="c1"># Show the ship</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/ship.png'</span><span class="p">,</span>
    <span class="ss">angle: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7kchjbljua9wcgss3sm.png" alt="Simple ship in the middle of the window" /></p>

<p>Not too exciting thus far, but we’ll make it better.</p>

<h2 id="rotation">Rotation</h2>

<p>For rotation, we’ll turn the ship <code class="language-plaintext highlighter-rouge">2.5</code> degrees when the left or right arrow keys are pressed or held down.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># Setting up initial state</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">||=</span> <span class="mi">0</span> 
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">||=</span> <span class="mi">0</span> 

  <span class="c1"># Turn left and right</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">right</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">+=</span> <span class="mf">2.5</span>
  <span class="k">elsif</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">left</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">-=</span> <span class="mf">2.5</span>
  <span class="k">end</span>

  <span class="c1"># Keep angle between 0 and 360</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">%=</span> <span class="mi">360</span>

  <span class="c1"># Show the ship</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/ship.png'</span><span class="p">,</span>
    <span class="ss">angle: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4fsmjga7et4merixxwr.gif" alt="Rotating spaceship" /></p>

<p>Important to note DragonRuby puts <code class="language-plaintext highlighter-rouge">0</code> straight to the right or “due east”, with increasing angles rotating counter-clockwise.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alqymowrzfxmqp3trt0q.png" alt="Angles in DragonRuby" /></p>

<h2 id="acceleration">Acceleration</h2>

<p>Still keeping things simple, let’s accelerate the ship when the up arrow is held down and decelerate otherwise.</p>

<p>For now we won’t worry about what direction the ship is heading.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># Setting up initial state</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">||=</span> <span class="mi">0</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">||=</span> <span class="mi">0</span>

  <span class="c1"># Accelerate with up arrow, otherwise decelerate</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">up</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">+=</span> <span class="mf">0.2</span>
  <span class="k">else</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">-=</span> <span class="mf">0.1</span>
  <span class="k">end</span>

  <span class="c1"># Keep speed between 0 and 10</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span><span class="p">.</span><span class="nf">clamp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

  <span class="c1"># Turn left and right</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">right</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">-=</span> <span class="mf">2.5</span>
  <span class="k">elsif</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">left</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">+=</span> <span class="mf">2.5</span>
  <span class="k">end</span>

  <span class="c1"># Keep angle between 0 and 360</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">%=</span> <span class="mi">360</span>

  <span class="c1"># Go?</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span>

  <span class="c1"># Show the ship</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/ship.png'</span><span class="p">,</span>
    <span class="ss">angle: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt45a5n5mfgkxvr6oa62.gif" alt="Ship moving to the right" /></p>

<h2 id="moving-in-arbitrary-directions">Moving in Arbitrary Directions</h2>

<p>We are almost there!</p>

<p>In the code above, we only update the ship’s <code class="language-plaintext highlighter-rouge">x</code> position. This is just to make sure we have the acceleration/deceleration working how we’d like.</p>

<p>But what we really want is to go in the direction the ship is pointing!</p>

<p>To do so, we need to update both the <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> position, proportional to the angle and speed… ugh that sounds like we might need some math! Trigonometry even??</p>

<p>Actually, DragonRuby comes to the rescue here! <code class="language-plaintext highlighter-rouge">Integer#vector</code> will return a unit vector (<code class="language-plaintext highlighter-rouge">[x, y]</code> where <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> are between <code class="language-plaintext highlighter-rouge">-1</code> and <code class="language-plaintext highlighter-rouge">1</code>) corresponding to the angle.</p>

<p>For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">0</span><span class="p">.</span><span class="nf">vector</span> <span class="c1"># =&gt; [1.0, 0.0]</span>
</code></pre></div></div>

<p>So at an angle of 0 degrees, only the <code class="language-plaintext highlighter-rouge">x</code> direction is affected.</p>

<p>But all we really need to know is that <code class="language-plaintext highlighter-rouge">angle.vector_x</code> and <code class="language-plaintext highlighter-rouge">angle.vector_y</code> will give us the “magnitude” we need to convert speed and angle to x and y distance:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">*</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">.</span><span class="nf">vector_x</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">*</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">.</span><span class="nf">vector_y</span>
</code></pre></div></div>

<p>Putting that into context:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># Setting up initial state</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">||=</span> <span class="mi">0</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">||=</span> <span class="mi">0</span>

  <span class="c1"># Accelerate with up arrow, otherwise decelerate</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">up</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">+=</span> <span class="mf">0.2</span>
  <span class="k">else</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">-=</span> <span class="mf">0.1</span>
  <span class="k">end</span>

  <span class="c1"># Keep speed between 0 and 10</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span><span class="p">.</span><span class="nf">clamp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

  <span class="c1"># Turn left and right</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">right</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">-=</span> <span class="mf">2.5</span>
  <span class="k">elsif</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">left</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">+=</span> <span class="mf">2.5</span>
  <span class="k">end</span>

  <span class="c1"># Keep angle between 0 and 360</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">%=</span> <span class="mi">360</span>

  <span class="c1"># Go in the correct direction!</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">*</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">.</span><span class="nf">vector_x</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">*</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">.</span><span class="nf">vector_y</span>

  <span class="c1"># Show the ship</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/ship.png'</span><span class="p">,</span>
    <span class="ss">angle: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egud8xk5if4ecyj3najt.gif" alt="Spaceship flying around" /></p>

<h2 id="staying-within-bounds">Staying Within Bounds</h2>

<p>Just to round this out, let’s do Astroids-style wrap-around to keep the ship on the screen.</p>

<p><code class="language-plaintext highlighter-rouge">args.grid.right</code> is the width of the screen and <code class="language-plaintext highlighter-rouge">args.grid.top</code> can be used for the height.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="c1"># Setting up initial state</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">||=</span> <span class="mi">50</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">||=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">||=</span> <span class="mi">0</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">||=</span> <span class="mi">0</span>

  <span class="c1"># Accelerate with up arrow, otherwise decelerate</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">up</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">+=</span> <span class="mf">0.2</span>
  <span class="k">else</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">-=</span> <span class="mf">0.1</span>
  <span class="k">end</span>

  <span class="c1"># Keep speed between 0 and 10</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span><span class="p">.</span><span class="nf">clamp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

  <span class="c1"># Turn left and right</span>
  <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">right</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">-=</span> <span class="mf">2.5</span>
  <span class="k">elsif</span> <span class="n">args</span><span class="p">.</span><span class="nf">inputs</span><span class="p">.</span><span class="nf">keyboard</span><span class="p">.</span><span class="nf">left</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">+=</span> <span class="mf">2.5</span>
  <span class="k">end</span>

  <span class="c1"># Keep angle between 0 and 360</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span> <span class="o">%=</span> <span class="mi">360</span>

  <span class="c1"># Go in the right direction!</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">*</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">.</span><span class="nf">vector_x</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">+=</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">speed</span> <span class="o">*</span> <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">.</span><span class="nf">vector_y</span>

  <span class="c1"># Wrap around to keep the ship on the screen</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span> <span class="o">%=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">right</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span> <span class="o">%=</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">top</span>

  <span class="c1"># Show the ship</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">x</span><span class="p">,</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">y</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">w</span><span class="p">,</span>
    <span class="ss">h: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">h</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/ship.png'</span><span class="p">,</span>
    <span class="ss">angle: </span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">ship</span><span class="p">.</span><span class="nf">angle</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n89ri46u96ug7y2e1f40.gif" alt="Spaceship flying around but warping between edges" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>And there we go. In less than 50 lines of code and with no complicated math, we can move an object around in arbitrary directions!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[In a previous post we looked at rotating rectangles in DragonRuby.]]></summary></entry><entry><title type="html">DragonRuby: Basic Sprite Animation</title><link href="https://blog.presidentbeef.com/blog/2022/06/26/dragonruby-basic-sprite-animation/" rel="alternate" type="text/html" title="DragonRuby: Basic Sprite Animation" /><published>2022-06-26T14:11:00-06:00</published><updated>2022-06-26T14:11:00-06:00</updated><id>https://blog.presidentbeef.com/blog/2022/06/26/dragonruby-basic-sprite-animation</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2022/06/26/dragonruby-basic-sprite-animation/"><![CDATA[<p>Animating sprites in <a href="https://dragonruby.org/">DragonRuby</a> is fairly simple, but it does require putting a couple ideas together.</p>

<p>First, it’s best to have a single image with all frames of the animation together, equally spaced apart. I prefer the frames are arranged horizontally from left-to-right, so that is what we will use here.</p>

<p>Here is an example, <a href="https://kenney.nl/assets/toon-characters-1">borrowed from here</a>:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv9eg653bi1mdwk3ea8m.png" alt="Animation frames of a walking adventurer" /></p>

<p>The first frame can be displayed like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="n">height</span> <span class="o">=</span> <span class="mi">195</span>
  <span class="n">width</span> <span class="o">=</span> <span class="mi">192</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span>
    <span class="ss">h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">source_x: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">source_y: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">source_w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">source_h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/walking.png'</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">source_x</code> and <code class="language-plaintext highlighter-rouge">source_y</code> set the <em>bottom left</em> corner of a “tile” or basically a slice of the image. (To use the <em>top</em> left instead, set <code class="language-plaintext highlighter-rouge">tile_x</code> and <code class="language-plaintext highlighter-rouge">tile_y</code>). <code class="language-plaintext highlighter-rouge">source_w</code> and <code class="language-plaintext highlighter-rouge">source_h</code> set the width and height of the tile. The sprite can be scaled when displayed with <code class="language-plaintext highlighter-rouge">w</code> and <code class="language-plaintext highlighter-rouge">h</code>.</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4t2zh97adawgjgo5em8.png" alt="Single frame of adventurer" /></p>

<p>If the frames are laid out horizontally, then all one needs to do is update the <code class="language-plaintext highlighter-rouge">source_x</code> value (typically by the width of the tile) in order to change the frame.</p>

<p>Here is an illustration for a few frames:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w8p5wzlp482b8c6gg8k.png" alt="Frame index illustration" /></p>

<p>We could accomplish this by using the multiplying the width of the tile by the current tick (modulo the number of frames, so it loops):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="n">height</span> <span class="o">=</span> <span class="mi">195</span>
  <span class="n">width</span> <span class="o">=</span> <span class="mi">192</span>
  <span class="n">num_frames</span> <span class="o">=</span> <span class="mi">8</span>

  <span class="n">source_x</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">%</span> <span class="n">num_frames</span><span class="p">)</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span>
    <span class="ss">h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">source_x: </span><span class="n">source_x</span><span class="p">,</span>
    <span class="ss">source_y: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">source_w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">source_h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/walking.png'</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This works… but it’s a bit fast for a walk!</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeeeimw4tx4a9gjg9egh.gif" alt="Very fast walk" /></p>

<p>This is where DragonRuby helps out. The <a href="https://docs.dragonruby.org/#/api/numeric?id=frame_index"><code class="language-plaintext highlighter-rouge">frame_index</code> method</a> will do the calculation of the current frame for us.</p>

<p><code class="language-plaintext highlighter-rouge">frame_index</code> accepts these arguments:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">count</code>: total number of frames in the animation</li>
  <li><code class="language-plaintext highlighter-rouge">hold_for</code>: how many ticks to wait between frames</li>
  <li><code class="language-plaintext highlighter-rouge">repeat</code>: whether or not to loop</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">frame_index</code> can be called on any integer, but typically uses the tick number on which the animation started. Below, the code sets this to <code class="language-plaintext highlighter-rouge">0</code> (the first tick). This could instead be when an event happens, based on input, or anything else.</p>

<p>Multiplying the <code class="language-plaintext highlighter-rouge">width</code> of the tile by the frame index results in the <code class="language-plaintext highlighter-rouge">source_x</code> value for the current frame of the animation:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="n">height</span> <span class="o">=</span> <span class="mi">195</span>
  <span class="n">width</span> <span class="o">=</span> <span class="mi">192</span>
  <span class="n">num_frames</span> <span class="o">=</span> <span class="mi">8</span>
  <span class="n">start_tick</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">delay</span> <span class="o">=</span> <span class="mi">4</span>

  <span class="n">source_x</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">start_tick</span><span class="p">.</span><span class="nf">frame_index</span><span class="p">(</span><span class="ss">count: </span><span class="n">num_frames</span><span class="p">,</span> <span class="ss">hold_for: </span><span class="n">delay</span><span class="p">,</span> <span class="ss">repeat: </span><span class="kp">true</span><span class="p">)</span>

  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span> <span class="o">-</span> <span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span>
    <span class="ss">y: </span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span> <span class="o">-</span> <span class="p">(</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span>
    <span class="ss">h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">source_x: </span><span class="n">source_x</span><span class="p">,</span>
    <span class="ss">source_y: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">source_w: </span><span class="n">width</span><span class="p">,</span>
    <span class="ss">source_h: </span><span class="n">height</span><span class="p">,</span>
    <span class="ss">path: </span><span class="s1">'sprites/walking.png'</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wnj69rllj4561g02hvg.gif" alt="Slower walk" /></p>

<p>And that’s it!</p>

<h2 id="but-with-ruby-classes">But With Ruby Classes</h2>

<p>Once a game starts to get moderately complex, I like to arrange behavior into classes. It’s also convenient to use <code class="language-plaintext highlighter-rouge">attr_gtk</code> to avoid passing <code class="language-plaintext highlighter-rouge">args</code> around and to save on some typing (e.g. <code class="language-plaintext highlighter-rouge">args.outputs</code> becomes just <code class="language-plaintext highlighter-rouge">outputs</code>).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyGame</span>
  <span class="n">attr_gtk</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="vi">@my_sprite</span> <span class="o">=</span> <span class="no">MySprite</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_x</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="nf">grid</span><span class="p">.</span><span class="nf">center_y</span><span class="p">)</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">static_sprites</span> <span class="o">&lt;&lt;</span> <span class="vi">@my_sprite</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">tick</span>
    <span class="k">if</span> <span class="n">inputs</span><span class="p">.</span><span class="nf">mouse</span><span class="p">.</span><span class="nf">click</span>
      <span class="k">if</span> <span class="vi">@my_sprite</span><span class="p">.</span><span class="nf">running?</span>
        <span class="vi">@my_sprite</span><span class="p">.</span><span class="nf">stop</span>
      <span class="k">else</span>
        <span class="vi">@my_sprite</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">state</span><span class="p">.</span><span class="nf">tick_count</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="vi">@my_sprite</span><span class="p">.</span><span class="nf">update</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">MySprite</span>
  <span class="n">attr_sprite</span>

  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>

    <span class="vi">@w</span> <span class="o">=</span> <span class="mi">192</span>
    <span class="vi">@h</span> <span class="o">=</span> <span class="mi">195</span>
    <span class="vi">@source_x</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="vi">@source_y</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="vi">@source_w</span> <span class="o">=</span> <span class="vi">@w</span>
    <span class="vi">@source_h</span> <span class="o">=</span> <span class="vi">@h</span>
    <span class="vi">@path</span> <span class="o">=</span> <span class="s1">'sprites/walking.png'</span>

    <span class="vi">@running</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="c1"># Set @running to the current tick number</span>
  <span class="c1"># this is so the frame_index can use that as the</span>
  <span class="c1"># start of the animation timing.</span>
  <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">tick_count</span><span class="p">)</span>
    <span class="vi">@running</span> <span class="o">=</span> <span class="n">tick_count</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">stop</span>
    <span class="vi">@running</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">running?</span>
    <span class="vi">@running</span>
  <span class="k">end</span>

  <span class="c1"># Update source_x based on frame_index</span>
  <span class="c1"># if currently running</span>
  <span class="k">def</span> <span class="nf">update</span>
    <span class="k">if</span> <span class="vi">@running</span>
      <span class="vi">@source_x</span> <span class="o">=</span> <span class="vi">@source_w</span> <span class="o">*</span> <span class="vi">@running</span><span class="p">.</span><span class="nf">frame_index</span><span class="p">(</span><span class="ss">count: </span><span class="mi">8</span><span class="p">,</span> <span class="ss">hold_for: </span><span class="mi">4</span><span class="p">,</span> <span class="ss">repeat: </span><span class="kp">true</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
  <span class="vg">$my_game</span> <span class="o">||=</span> <span class="no">MyGame</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="vg">$my_game</span><span class="p">.</span><span class="nf">args</span> <span class="o">=</span> <span class="n">args</span>
  <span class="vg">$my_game</span><span class="p">.</span><span class="nf">tick</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This example essentially follows my <a href="https://dev.to/presidentbeef/dragonruby-object-oriented-starter-3plg">Object-Oriented Starter</a> approach and moves the logic into a game class and a sprite class.</p>

<p>When the mouse is clicked, the sprite starts moving (using the current <code class="language-plaintext highlighter-rouge">tick_count</code> as the starting tick). When the mouse is clicked again, the sprite stops.</p>

<h2 id="source-vs-tile">Source vs. Tile</h2>

<p>To use just a piece of an image (for animations or otherwise), there are two options: <code class="language-plaintext highlighter-rouge">source_(x|y|h|w)</code> or <code class="language-plaintext highlighter-rouge">tile_(x|y|h|w)</code>.</p>

<p>These options are nearly identical, except <code class="language-plaintext highlighter-rouge">source_y</code> is bottom left and <code class="language-plaintext highlighter-rouge">tile_y</code> is top left.</p>

<p>The <code class="language-plaintext highlighter-rouge">source_</code> options were added in DragonRuby 1.6 and are more consistent with the rest of DragonRuby where the origin is the bottom left. On the other hand, the <code class="language-plaintext highlighter-rouge">tile_</code> options align easier with image editors.</p>

<p>Either option works, depending on what is important to you.</p>

<h2 id="go">Go!</h2>

<p>Now that’s really it! Get moving!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Animating sprites in DragonRuby is fairly simple, but it does require putting a couple ideas together.]]></summary></entry><entry><title type="html">DragonRuby: Rotating Rectangles</title><link href="https://blog.presidentbeef.com/blog/2022/04/30/dragonruby-rotating-rectangles/" rel="alternate" type="text/html" title="DragonRuby: Rotating Rectangles" /><published>2022-04-30T10:51:00-06:00</published><updated>2022-04-30T10:51:00-06:00</updated><id>https://blog.presidentbeef.com/blog/2022/04/30/dragonruby-rotating-rectangles</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2022/04/30/dragonruby-rotating-rectangles/"><![CDATA[<p>In <a href="https://dragonruby.itch.io/dragonruby-gtk">DragonRuby</a>, one of the drawing primitives is a “solid” - a rectangle, actually.</p>

<p>Rectangles are defined by the origin point of the bottom-right corner (<code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>) and a size in height/width (<code class="language-plaintext highlighter-rouge">h</code>, <code class="language-plaintext highlighter-rouge">w</code>).</p>

<p>For example, this code paints a black rectangle in roughly the middle of the screen:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">solids</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="mi">490</span><span class="p">,</span>
    <span class="ss">y: </span><span class="mi">310</span><span class="p">,</span>
    <span class="ss">w: </span><span class="mi">300</span><span class="p">,</span>
    <span class="ss">h: </span><span class="mi">100</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejiyfwz8sz2t9eypvgs7.png" alt="DragonRuby window with a black rectangle in the middle" /></p>

<p>Rectangles are simple and (presumably) fast. But what if we want to put the rectangle at an angle? Or spin it around?</p>

<p>For sprites, there is an <code class="language-plaintext highlighter-rouge">angle</code> attribute. Will that work for rectangles? Unfortunately, no.</p>

<p>We could make a rectangle image and use it in a sprite, but that seems wasteful. I don’t know if resizing a sprite is very resource-intensive, but I’m sure it takes more cycles than changing the size of a simple rectangle.</p>

<p>Fortunately, there is a middle way.</p>

<p>From the 2.26 release notes (and yes, this is the only place I could find this functionality formally documented, though it is used in examples):</p>

<blockquote>
  <p>** [API] Pre-defined ~:pixel~ render target now available.
   Before ~(boot|tick)~ are invoked, a white solid with a size of 1280x1280
   is added as a render target. You can use this predefined render target to
   create solids and get ~args.outputs.sprites~ related capabilities.</p>
</blockquote>

<p>In other words, it is possible to create an equivalent rectangle to the above like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="mi">490</span><span class="p">,</span>
    <span class="ss">y: </span><span class="mi">310</span><span class="p">,</span>
    <span class="ss">w: </span><span class="mi">300</span><span class="p">,</span>
    <span class="ss">h: </span><span class="mi">100</span><span class="p">,</span>
    <span class="ss">r: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">g: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">b: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">path: :pixel</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The key piece is <code class="language-plaintext highlighter-rouge">path: :pixel</code> and creating a sprite instead of a solid.</p>

<p>As is mentioned above, the <code class="language-plaintext highlighter-rouge">:pixel</code> <a href="https://dev.to/presidentbeef/dragonruby-render-targets-437k">render target</a> is white, so to get exactly the same results as before the color is set to black. If no <code class="language-plaintext highlighter-rouge">r</code><code class="language-plaintext highlighter-rouge">g</code><code class="language-plaintext highlighter-rouge">b</code> values were specified, it would be a white rectangle.</p>

<p>Now, can we rotate this rectangle?</p>

<p>Sure!</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
    <span class="ss">x: </span><span class="mi">490</span><span class="p">,</span>
    <span class="ss">y: </span><span class="mi">310</span><span class="p">,</span>
    <span class="ss">w: </span><span class="mi">300</span><span class="p">,</span>
    <span class="ss">h: </span><span class="mi">100</span><span class="p">,</span>
    <span class="ss">r: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">g: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">b: </span><span class="mi">0</span><span class="p">,</span>
    <span class="ss">path: :pixel</span><span class="p">,</span>
    <span class="ss">angle: </span><span class="mi">45</span><span class="p">,</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iri546i42cs9waajgo91.png" alt="Image description" /></p>

<p>(By the way, angles in DragonRuby are in degrees.)</p>

<h3 id="spinning-round-and-round">Spinning Round and Round</h3>

<p>Here is an example of spinning the rectangle around:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
      <span class="ss">x: </span><span class="mi">490</span><span class="p">,</span>
      <span class="ss">y: </span><span class="mi">310</span><span class="p">,</span>
      <span class="ss">w: </span><span class="mi">300</span><span class="p">,</span>
      <span class="ss">h: </span><span class="mi">100</span><span class="p">,</span>
      <span class="ss">r: </span><span class="mi">0</span><span class="p">,</span>
      <span class="ss">g: </span><span class="mi">0</span><span class="p">,</span>
      <span class="ss">b: </span><span class="mi">0</span><span class="p">,</span>
      <span class="ss">path: :pixel</span><span class="p">,</span>
      <span class="ss">angle: </span><span class="n">args</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">%</span> <span class="mi">360</span><span class="p">,</span>
    <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ghaj7ac17cnpxwgs3yy.gif" alt="Black rectangle spinning around its center" /></p>

<p>This is great and all, but what if you’d rather have it spin around like this?</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm0zj01nnjw22xrpv6mo.gif" alt="Black rectangle spinning around a corner" /></p>

<p>With some sleuthing, you might find the <code class="language-plaintext highlighter-rouge">angle_anchor_x</code> and <code class="language-plaintext highlighter-rouge">angle_anchor_y</code> attributes. And you would be forgiven for thinking those refer to points on the coordinate grid. But they do not!</p>

<p>Instead, <code class="language-plaintext highlighter-rouge">angle_anchor_x</code> and <code class="language-plaintext highlighter-rouge">angle_anchor_y</code> are <em>percentages relative to the sprite itself</em>.</p>

<p>In other words, if both anchors are set to <code class="language-plaintext highlighter-rouge">0.5</code> (the default), the center of the rotation will be the middle of the sprite (half of the width and half of the height).</p>

<p><code class="language-plaintext highlighter-rouge">0</code>,<code class="language-plaintext highlighter-rouge">0</code> is the bottom-left corner of the sprite, as shown above:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
      <span class="ss">x: </span><span class="mi">490</span><span class="p">,</span>
      <span class="ss">y: </span><span class="mi">310</span><span class="p">,</span>
      <span class="ss">w: </span><span class="mi">300</span><span class="p">,</span>
      <span class="ss">h: </span><span class="mi">100</span><span class="p">,</span>
      <span class="ss">r: </span><span class="mi">0</span><span class="p">,</span>
      <span class="ss">g: </span><span class="mi">0</span><span class="p">,</span>
      <span class="ss">b: </span><span class="mi">0</span><span class="p">,</span>
      <span class="ss">path: :pixel</span><span class="p">,</span>
      <span class="ss">angle: </span><span class="n">args</span><span class="p">.</span><span class="nf">tick_count</span> <span class="o">%</span> <span class="mi">360</span><span class="p">,</span>
      <span class="ss">angle_anchor_x: </span><span class="mi">0</span><span class="p">,</span>
      <span class="ss">angle_anchor_y: </span><span class="mi">0</span><span class="p">,</span>
    <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Anchor values between <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">1</code> will be inside the sprite. But values greater than <code class="language-plaintext highlighter-rouge">1</code> or less than <code class="language-plaintext highlighter-rouge">0</code> will be outside the sprite.</p>

<p>Here is a little reference:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwlbn5o29zou5qvpf7ug.png" alt="Angle anchors on a black rectangle" /></p>

<p>Happy rectangle rotating!</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8rjfdi9tcvz26iuc9de.gif" alt="Five colorful rotating rectangles" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[In DragonRuby, one of the drawing primitives is a “solid” - a rectangle, actually.]]></summary></entry><entry><title type="html">Automatically Partitioning Cloudflare Logs for Athena</title><link href="https://blog.presidentbeef.com/blog/2022/02/17/automatically-partitioning-cloudflare-logs-for-athena/" rel="alternate" type="text/html" title="Automatically Partitioning Cloudflare Logs for Athena" /><published>2022-02-17T21:00:00-07:00</published><updated>2022-02-17T21:00:00-07:00</updated><id>https://blog.presidentbeef.com/blog/2022/02/17/automatically-partitioning-cloudflare-logs-for-athena</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2022/02/17/automatically-partitioning-cloudflare-logs-for-athena/"><![CDATA[<p>If you are using Cloudflare, it can be helpful to <a href="https://developers.cloudflare.com/logs/get-started/enable-destinations/aws-s3">configure Cloudflare to push request logs to S3</a>. Otherwise, the Cloudflare dashboard provides only a limited view into your data (72 hours at a time and sampled data instead of full logs).</p>

<p>Once the Cloudflare request logs are in S3, they can be queried using <a href="https://aws.amazon.com/athena/">Athena</a>. <a href="https://duffn.medium.com/analyzing-cloudflare-logs-with-aws-athena-19c1399c91e3">This blog post</a> even provides a nice <code class="language-plaintext highlighter-rouge">CREATE TABLE</code> command to set up the table in Athena.</p>

<p>However, there is a problem. When performing a query in Athena, it <em>might</em> have to scan <em>all</em> of the logs in S3, even if you try to limit the query. This can be slow and costly, as Athena queries are charged per byte scanned.</p>

<p>The only way to really limit the amount of data scanned is to <a href="https://docs.aws.amazon.com/athena/latest/ug/partitions.html">partition the data</a>.</p>

<p>This post assumes you have already set up Cloudflare to push logs to an S3 bucket, configured a database in Athena to access it, and then realized those logs will grow forever, along with your query times.</p>

<p>(If you just want the “how to” without the exposition, jump down to “Setting Up Partitions for Cloudflare Logs”.)</p>

<h3 id="partitioning">Partitioning</h3>

<p>Most commonly, you will want to look at logs from a specific time period, so it makes sense to partition the logs by date.</p>

<p>Most of the partitioning documentation suggests the files (or in this case, S3 objects) include a <code class="language-plaintext highlighter-rouge">column=value</code> key pair in the name. The <code class="language-plaintext highlighter-rouge">column</code> can then be used as a partition.</p>

<p>Unfortunately, Cloudflare does not allow customizing the format of the file names it produces.</p>

<p><em>Fortunately</em>, the file names do include date/time information. The logs are grouped by date and time range:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s3://mah_s3_bucket/20210812/20210812T223000Z_20210812T224000Z_9af500e2.log.gz
</code></pre></div></div>

<p>So all we need to do is grab that date “folder” name and that’s our partition! Easy, right?</p>

<p>No, wrong. This is AWS. <em>Nothing is easy.</em></p>

<h3 id="use-a-recurring-job">Use a Recurring Job?</h3>

<p>Several of the AWS documentation pages suggest using <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> to <a href="https://docs.aws.amazon.com/athena/latest/ug/alter-table-add-partition.html"><code class="language-plaintext highlighter-rouge">ADD PARTITION</code>s</a>.</p>

<p>Something like this:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">cloudflare_logs</span> <span class="k">ADD</span>
  <span class="k">PARTITION</span> <span class="p">(</span><span class="n">dt</span> <span class="o">=</span> <span class="s1">'2021-08-12'</span><span class="p">)</span> <span class="k">LOCATION</span> <span class="s1">'s3://mah_log_bucket/20210812/'</span><span class="p">;</span>
</code></pre></div></div>

<p>But since the logs will grow every day, we’ll need to add new a new partition every 24 hours. It is not possible to “predefine” the partitions.</p>

<p>This requires setting up a recurring job… somewhere… to periodically define the new partitions. So now we have to pull in <em>another</em> AWS service to make S3 and Athena work nicely?! No thanks!</p>

<h3 id="partition-projection">Partition Projection</h3>

<p>At the bottom of the page about partitions, there is a paragraph about “<a href="https://docs.aws.amazon.com/athena/latest/ug/partitions.html#partitions-partition-projection">partition projection</a>” that sounds promising:</p>

<blockquote>
  <p>To avoid having to manage partitions, you can use partition projection. Partition projection is an option for highly partitioned tables whose structure is known in advance.</p>
</blockquote>

<p>Yes, this is what we want! But how does it work?</p>

<p>Essentially like this:</p>

<p>We must define a column, its type, start and end values, and the interval between those values. Athena will then be able to extrapolate all the possible values.</p>

<p>Then we define a pattern to pull the value out of each S3 object <em>name</em>. This allows Athena to figure out which objects (logs) are associated with which partition value.</p>

<p>For example, the partition <code class="language-plaintext highlighter-rouge">20210812</code> will be associated with <code class="language-plaintext highlighter-rouge">s3://mah_s3_bucket/20210812/20210812T223000Z_20210812T224000Z_9af500e2.log.gz</code></p>

<p>Once that’s all done, we can query based on the partition as if it were a column, like:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">cloudflare_logs</span>
<span class="k">WHERE</span> <span class="n">log_date</span> <span class="o">&gt;=</span> <span class="s1">'20210812'</span>
  <span class="k">AND</span> <span class="n">log_date</span> <span class="o">&lt;</span> <span class="s1">'20210901'</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="setting-up-partitions-for-cloudflare-logs">Setting Up Partitions for Cloudflare Logs</h2>

<p>Here are the steps that <em>must</em> be taken to set up the partitions:</p>

<ol>
  <li>Add the partition “column” when creating the table</li>
  <li>Set several properties on the table to define the projection</li>
  <li>Set the partition pattern to match against object names</li>
  <li>Enable projection</li>
</ol>

<p>(Actually, 2-4 are all the same: set (totally unvalidated) key-value properties on the table.)</p>

<p>Fortunately, all of this can be accomplished with one giant Athena command:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="nv">`YOUR_TABLE_NAME`</span><span class="p">(</span>
  <span class="nv">`botscore`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`botscoresrc`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`cachecachestatus`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`cacheresponsebytes`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`cacheresponsestatus`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`clientasn`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`clientcountry`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientdevicetype`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientip`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientipclass`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientrequestbytes`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`clientrequesthost`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientrequestmethod`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientrequestpath`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientrequestprotocol`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientrequestreferer`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientrequesturi`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientrequestuseragent`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientsslcipher`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientsslprotocol`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`clientsrcport`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`edgecolocode`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgecoloid`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`edgeendtimestamp`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgepathingop`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgepathingsrc`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgepathingstatus`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgeratelimitaction`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgeratelimitid`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`edgerequesthost`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgeresponsebytes`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`edgeresponsecontenttype`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgeresponsestatus`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`edgeserverip`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`edgestarttimestamp`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`firewallmatchesactions`</span> <span class="n">array</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nv">`firewallmatchesruleids`</span> <span class="n">array</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nv">`firewallmatchessources`</span> <span class="n">array</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nv">`originip`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`originresponsestatus`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`originresponsetime`</span> <span class="nb">int</span><span class="p">,</span>
  <span class="nv">`originsslprotocol`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`rayid`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`wafaction`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`wafflags`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`wafmatchedvar`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`wafprofile`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`wafruleid`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`wafrulemessage`</span> <span class="n">string</span><span class="p">,</span>
  <span class="nv">`workersubrequest`</span> <span class="nb">boolean</span><span class="p">,</span>
  <span class="nv">`zoneid`</span> <span class="nb">bigint</span><span class="p">)</span>
<span class="n">PARTITIONED</span> <span class="k">BY</span> <span class="p">(</span>
  <span class="nv">`YOUR_COLUMN_NAME`</span> <span class="n">string</span><span class="p">)</span>
<span class="k">ROW</span> <span class="n">FORMAT</span> <span class="n">SERDE</span>
  <span class="s1">'org.openx.data.jsonserde.JsonSerDe'</span>
<span class="n">STORED</span> <span class="k">AS</span> <span class="n">INPUTFORMAT</span>
  <span class="s1">'org.apache.hadoop.mapred.TextInputFormat'</span>
<span class="n">OUTPUTFORMAT</span>
  <span class="s1">'org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat'</span>
<span class="k">LOCATION</span>
  <span class="s1">'s3://YOUR_BUCKET_NAME/'</span>
<span class="n">TBLPROPERTIES</span> <span class="p">(</span>
  <span class="s1">'projection.enabled'</span><span class="o">=</span><span class="s1">'TRUE'</span><span class="p">,</span>
  <span class="s1">'projection.YOUR_COLUMN_NAME.format'</span><span class="o">=</span><span class="s1">'yyyyMMdd'</span><span class="p">,</span>
  <span class="s1">'projection.YOUR_COLUMN_NAME.interval'</span><span class="o">=</span><span class="s1">'1'</span><span class="p">,</span>
  <span class="s1">'projection.YOUR_COLUMN_NAME.interval.unit'</span><span class="o">=</span><span class="s1">'DAYS'</span><span class="p">,</span>
  <span class="s1">'projection.YOUR_COLUMN_NAME.range'</span><span class="o">=</span><span class="s1">'YOUR_START_DATE,NOW'</span><span class="p">,</span>
  <span class="s1">'projection.YOUR_COLUMN_NAME.type'</span><span class="o">=</span><span class="s1">'date'</span><span class="p">,</span> 
 
 <span class="s1">'storage.location.template'</span><span class="o">=</span><span class="s1">'s3://YOUR_BUCKET_NAME/${YOUR_COLUMN_NAME}/'</span>
<span class="p">)</span> 
</code></pre></div></div>

<p>These are the pieces related to partitioning:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PARTITIONED</span> <span class="k">BY</span> <span class="p">(</span>
  <span class="nv">`YOUR_COLUMN_NAME`</span> <span class="n">string</span><span class="p">)</span>
</code></pre></div></div>

<p>This tells Athena to set up a column for the partition.</p>

<p>(The type of the partition column <strong>must</strong> be <code class="language-plaintext highlighter-rouge">string</code>, even though the projection type <strong>must</strong> be <code class="language-plaintext highlighter-rouge">date</code>. Does this make any sense? <strong>NO</strong>.)</p>

<p>Then the table properties.</p>

<p>Turn on projection:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'projection.enabled'</span><span class="o">=</span><span class="s1">'TRUE'</span>
</code></pre></div></div>

<p>Set the column type to date:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'projection.YOUR_COLUMN_NAME.type'</span><span class="o">=</span><span class="s1">'date'</span>
</code></pre></div></div>

<p>This is so Athena knows how to interpolate values.</p>

<p>Define the date format to match:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'projection.YOUR_COLUMN_NAME.format'</span><span class="o">=</span><span class="s1">'yyyyMMdd'</span>
</code></pre></div></div>

<p>Set the interval for the values to one day:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'projection.YOUR_COLUMN_NAME.interval'</span><span class="o">=</span><span class="s1">'1'</span><span class="p">,</span>
<span class="s1">'projection.YOUR_COLUMN_NAME.interval.unit'</span><span class="o">=</span><span class="s1">'DAYS'</span>
</code></pre></div></div>

<p>Set the range for the values:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'projection.YOUR_COLUMN_NAME.range'</span><span class="o">=</span><span class="s1">'YOUR_START_DATE,NOW'</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">NOW</code> is a special value so the end of the range will always be the current day.</p>

<p>This sets a template to extract the date string from the object name, using the date template defined above, and setting the value in the column name specified for the projection:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'storage.location.template'</span><span class="o">=</span><span class="s1">'s3://YOUR_BUCKET_NAME/${YOUR_COLUMN_NAME}/'</span>
</code></pre></div></div>

<p>If you are unfamiliar with Athena, it’s good to know that deleting/creating tables is low impact. If the table is already created, it is not a big deal to delete it and start over.</p>

<p>Here are the important bits above that you will need to change:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">YOUR_TABLE_NAME</code> is whatever you want to name the table. Something like <code class="language-plaintext highlighter-rouge">cloudflare_logs</code> would probably make sense.</li>
  <li><code class="language-plaintext highlighter-rouge">YOUR_COLUMN_NAME</code> is whatever you want to name the projection “column”. Could be <code class="language-plaintext highlighter-rouge">dt</code> like in the AWS docs, or <code class="language-plaintext highlighter-rouge">log_date</code> or whatever you want.</li>
  <li><code class="language-plaintext highlighter-rouge">YOUR_BUCKET_NAME</code> is the name of the S3 bucket.</li>
  <li><code class="language-plaintext highlighter-rouge">YOUR START_DATE</code> is the date of the first log. Something like <code class="language-plaintext highlighter-rouge">20210101</code>.</li>
</ul>

<p>The table should now indicate it is partitioned:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z17sufwwkndnfbygh7xm.png" alt="Table name with text 'partitioned' next to it" /></p>

<p>And the partition should show up as a column:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k9ixdqd6820stqrvetr.png" alt="Column name with text 'string (partitioned)' next to it" /></p>

<h3 id="using-date-partitions">Using Date Partitions</h3>

<p>To test if partitions are working as expected, a quick query like this will work:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">DISTINCT</span><span class="p">(</span><span class="n">YOUR_COLUMN_NAME</span><span class="p">)</span>
<span class="k">FROM</span> <span class="nv">"YOUR_TABLE_NAME"</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>The expected output is several dates for which there are logs.</p>

<p>Once that is confirmed, the partition column can be used like any other column. Since the values is a basic ISO date format, comparison operators can be safely used even though the column is really just a string.</p>

<p>For a single day:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">YOUR_TABLE</span>
<span class="k">WHERE</span> <span class="n">YOUR_COLUMN_NAME</span> <span class="o">=</span> <span class="nv">"20200101"</span><span class="p">;</span>
</code></pre></div></div>

<p>For an inclusive range:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">YOUR_TABLE</span>
<span class="k">WHERE</span> <span class="n">YOUR_COLUMN_NAME</span> <span class="o">&gt;=</span> <span class="nv">"20200101"</span>
  <span class="k">AND</span> <span class="n">YOUR_COLUMN_NAME</span> <span class="o">&lt;=</span> <span class="nv">"20210101"</span><span class="p">;</span>
</code></pre></div></div>

<p>And now your queries can be faster and cheaper!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[If you are using Cloudflare, it can be helpful to configure Cloudflare to push request logs to S3. Otherwise, the Cloudflare dashboard provides only a limited view into your data (72 hours at a time and sampled data instead of full logs).]]></summary></entry><entry><title type="html">Sounds in DragonRuby</title><link href="https://blog.presidentbeef.com/blog/2022/01/31/sounds-in-dragonruby/" rel="alternate" type="text/html" title="Sounds in DragonRuby" /><published>2022-01-31T11:00:00-07:00</published><updated>2022-01-31T11:00:00-07:00</updated><id>https://blog.presidentbeef.com/blog/2022/01/31/sounds-in-dragonruby</id><content type="html" xml:base="https://blog.presidentbeef.com/blog/2022/01/31/sounds-in-dragonruby/"><![CDATA[<p>The sound API in <a href="https://dragonruby.itch.io/dragonruby-gtk">DragonRuby</a> is a little tricky because at first it seems similar to the sprite API (e.g. using <code class="language-plaintext highlighter-rouge">args.outputs</code>) but it diverges sharply when you want to have some more control.</p>

<p>So let’s take a quick look at audio in DragonRuby!</p>

<h3 id="simple-music">Simple Music</h3>

<p>As usual with DragonRuby, the simple stuff is simple.</p>

<p>To play a looping sound, for example as background music, get a sound file in <code class="language-plaintext highlighter-rouge">.ogg</code> format and then add it on to <code class="language-plaintext highlighter-rouge">args.outputs.sounds</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sounds</span> <span class="o">&lt;&lt;</span> <span class="s1">'sounds/my_music.ogg'</span>
</code></pre></div></div>

<p>The audio will loop forever.</p>

<h3 id="simple-sound-effects">Simple Sound Effects</h3>

<p>Want to fire off a single sound effect?</p>

<p>Get a sound file in <code class="language-plaintext highlighter-rouge">.wav</code> format and then add it on to <code class="language-plaintext highlighter-rouge">args.outputs.sounds</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sounds</span> <span class="o">&lt;&lt;</span> <span class="s1">'sounds/my_effect.wav'</span>
</code></pre></div></div>

<p>The sound will play once.</p>

<p><em>Wait so the API behaves differently based on the file format?</em></p>

<p>Yep. A little odd but it works.</p>

<h3 id="adjusting-the-volume-knob">Adjusting the Volume Knob</h3>

<p>Playing a sound effect in DragonRuby is pretty easy. But what if we need to adjust the volume or some other attribute of the audio? Or maybe loop a <code class="language-plaintext highlighter-rouge">.wav</code> or not loop a <code class="language-plaintext highlighter-rouge">.ogg</code> file?</p>

<p>You might think, based on how sprites work in DragonRuby, you could do something like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This does not work!</span>
<span class="n">args</span><span class="p">.</span><span class="nf">outputs</span><span class="p">.</span><span class="nf">sounds</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
  <span class="ss">input: </span><span class="s1">'sounds/my_music.ogg'</span><span class="p">,</span>
  <span class="ss">gain: </span><span class="mf">0.5</span><span class="p">,</span>      <span class="c1"># Half volume</span>
  <span class="ss">looping: </span><span class="kp">false</span>  <span class="c1"># Don't loop</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But this does not work.</p>

<p>Instead, you need to use an entirely different interface: <code class="language-plaintext highlighter-rouge">args.audio</code>.</p>

<p><code class="language-plaintext highlighter-rouge">args.audio</code> is a hash table of sounds.</p>

<p>To add a new sound, assign it with a name:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="nf">audio</span><span class="p">[</span><span class="ss">:music</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">input: </span><span class="s1">'sounds/my_music.ogg'</span><span class="p">,</span>
  <span class="ss">gain: </span><span class="mf">0.5</span><span class="p">,</span>
  <span class="ss">looping: </span><span class="kp">false</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To adjust an attribute of the audio, access it by the same name:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Turn up the volume</span>
<span class="n">args</span><span class="p">.</span><span class="nf">audio</span><span class="p">[</span><span class="ss">:music</span><span class="p">].</span><span class="nf">gain</span> <span class="o">=</span> <span class="mf">0.75</span>
</code></pre></div></div>

<p>To pause a sound:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="nf">audio</span><span class="p">[</span><span class="ss">:music</span><span class="p">].</span><span class="nf">paused</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre></div></div>

<p>To completely remove a sound:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="nf">audio</span><span class="p">.</span><span class="nf">delete</span> <span class="ss">:music</span>
</code></pre></div></div>

<h3 id="more-music-manipulation">More Music Manipulation</h3>

<p>This is the full set of options for audio from <a href="http://docs.dragonruby.org/#--docs---gtk--args#audio-">the documentation</a>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="nf">audio</span><span class="p">[</span><span class="ss">:my_music</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">input: </span><span class="s1">'sounds/my_music.ogg'</span><span class="p">,</span>
  <span class="ss">x: </span><span class="mf">0.0</span><span class="p">,</span> <span class="ss">y: </span><span class="mf">0.0</span><span class="p">,</span> <span class="ss">z: </span><span class="mf">0.0</span><span class="p">,</span>   <span class="c1"># Relative position to the listener, x, y, z from -1.0 to 1.0</span>
  <span class="ss">gain: </span><span class="mf">1.0</span><span class="p">,</span>                <span class="c1"># Volume (0.0 to 1.0)</span>
  <span class="ss">pitch: </span><span class="mf">1.0</span><span class="p">,</span>               <span class="c1"># Pitch of the sound (1.0 = original pitch)</span>
  <span class="ss">paused: </span><span class="kp">false</span><span class="p">,</span>            <span class="c1"># Set to true to pause</span>
  <span class="ss">looping: </span><span class="kp">false</span><span class="p">,</span>           <span class="c1"># Set to true to loop</span>
<span class="p">}</span>
</code></pre></div></div>

<p>That’s it!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[The sound API in DragonRuby is a little tricky because at first it seems similar to the sprite API (e.g. using args.outputs) but it diverges sharply when you want to have some more control.]]></summary></entry></feed>