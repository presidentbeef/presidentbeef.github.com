<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Justin Collins' Blugh]]></title>
  <link href="https://blog.presidentbeef.com/atom.xml" rel="self"/>
  <link href="https://blog.presidentbeef.com/"/>
  <updated>2022-02-02T20:25:36-08:00</updated>
  <id>https://blog.presidentbeef.com/</id>
  <author>
    <name><![CDATA[Justin Collins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sounds in DragonRuby]]></title>
    <link href="https://blog.presidentbeef.com/blog/2022/01/31/sounds-in-dragonruby/"/>
    <updated>2022-01-31T11:00:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2022/01/31/sounds-in-dragonruby</id>
    <content type="html"><![CDATA[<p>The sound API in <a href="https://dragonruby.itch.io/dragonruby-gtk">DragonRuby</a> is a little tricky because at first it seems similar to the sprite API (e.g. using <code>args.outputs</code>) but it diverges sharply when you want to have some more control.</p>

<p>So let&#8217;s take a quick look at audio in DragonRuby!</p>

<h3>Simple Music</h3>

<p>As usual with DragonRuby, the simple stuff is simple.</p>

<p>To play a looping sound, for example as background music, get a sound file in <code>.ogg</code> format and then add it on to <code>args.outputs.sounds</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">sounds</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;sounds/my_music.ogg&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The audio will loop forever.</p>

<h3>Simple Sound Effects</h3>

<p>Want to fire off a single sound effect?</p>

<p>Get a sound file in <code>.wav</code> format and then add it on to <code>args.outputs.sounds</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">sounds</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;sounds/my_effect.wav&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The sound will play once.</p>

<p><em>Wait so the API behaves differently based on the file format?</em></p>

<p>Yep. A little odd but it works.</p>

<h3>Adjusting the Volume Knob</h3>

<p>Playing a sound effect in DragonRuby is pretty easy. But what if we need to adjust the volume or some other attribute of the audio? Or maybe loop a <code>.wav</code> or not loop a <code>.ogg</code> file?</p>

<p>You might think, based on how sprites work in DragonRuby, you could do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This does not work!</span>
</span><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">sounds</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">input</span><span class="p">:</span> <span class="s1">&#39;sounds/my_music.ogg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">gain</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span>      <span class="c1"># Half volume</span>
</span><span class='line'>  <span class="ss">looping</span><span class="p">:</span> <span class="kp">false</span>  <span class="c1"># Don&#39;t loop</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this does not work.</p>

<p>Instead, you need to use an entirely different interface: <code>args.audio</code>.</p>

<p><code>args.audio</code> is a hash table of sounds.</p>

<p>To add a new sound, assign it with a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">audio</span><span class="o">[</span><span class="ss">:music</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">input</span><span class="p">:</span> <span class="s1">&#39;sounds/my_music.ogg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">gain</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">looping</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To adjust an attribute of the audio, access it by the same name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Turn up the volume</span>
</span><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">audio</span><span class="o">[</span><span class="ss">:music</span><span class="o">].</span><span class="n">gain</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">75</span>
</span></code></pre></td></tr></table></div></figure>


<p>To pause a sound:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">audio</span><span class="o">[</span><span class="ss">:music</span><span class="o">].</span><span class="n">paused</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>To completely remove a sound:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">audio</span><span class="o">.</span><span class="n">delete</span> <span class="ss">:music</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More Music Manipulation</h3>

<p>This is the full set of options for audio from <a href="http://docs.dragonruby.org/#--docs---gtk--args#audio-">the documentation</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">audio</span><span class="o">[</span><span class="ss">:my_music</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">input</span><span class="p">:</span> <span class="s1">&#39;sounds/my_music.ogg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">z</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span>   <span class="c1"># Relative position to the listener, x, y, z from -1.0 to 1.0</span>
</span><span class='line'>  <span class="ss">gain</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span>                <span class="c1"># Volume (0.0 to 1.0)</span>
</span><span class='line'>  <span class="ss">pitch</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span>               <span class="c1"># Pitch of the sound (1.0 = original pitch)</span>
</span><span class='line'>  <span class="ss">paused</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>            <span class="c1"># Set to true to pause</span>
</span><span class='line'>  <span class="ss">looping</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>           <span class="c1"># Set to true to loop</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DragonRuby: Render Targets]]></title>
    <link href="https://blog.presidentbeef.com/blog/2022/01/24/dragon-ruby-render-targets/"/>
    <updated>2022-01-24T11:00:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2022/01/24/dragon-ruby-render-targets</id>
    <content type="html"><![CDATA[<p>Next up in my notes on <a href="https://dragonruby.itch.io/dragonruby-gtk">DragonRuby</a>: render targets!</p>

<p>Weirdly, the <a href="http://docs.dragonruby.org/#----advanced-rendering---simple-render-targets---main-rb">documentation on DragonRuby&#8217;s render targets</a> is limited to example code. Personally, I prefer prose when I am trying to learn&#8230; so here we are!</p>

<p>In DragonRuby, a render target is like an infinite canvas you can render as many regular sprites onto as you want, then manipulate the whole thing as if it is one sprite.</p>

<p>This is especially good for things like tiled backgrounds that are built once and do not change.</p>

<p>Let&#8217;s take an example.</p>

<h2>Clouds!</h2>

<p>Let&#8217;s start off very simple and build up.</p>

<p>First, here&#8217;s all the code to render a single 250x250 pixel image to the screen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">clouds</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;sprites/cloud.png&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">sprites</span> <span class="o">&lt;&lt;</span> <span class="n">clouds</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4bpadbxwln2zp3gsuai.png" alt="Single cloud tile" /></p>

<h3>More Clouds</h3>

<p>Cool, but I&#8217;d like to fill the whole window with clouds, so I&#8217;m going to tile them.</p>

<p>The code below makes a 6x3 grid of the cloud image.</p>

<p>(In DragonRuby, the screen is always 1280x720. Our grid is 1500x750 but I&#8217;m not trying to be too precise with the numbers here.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">clouds</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">6</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="n">clouds</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">*</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">h</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">w</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;sprites/cloud.png&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">sprites</span> <span class="o">&lt;&lt;</span> <span class="n">clouds</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o99o7jjmnfxupewak1n9.png" alt="Screen full of blue clouds" /></p>

<p>Ah&#8230; blue clouds. Nice.</p>

<p>On every tick, the code builds up an array of 18 sprites (images) and renders it out to the screen.</p>

<p>(There are a number of ways to make this more efficient - check out the <a href="https://dev.to/presidentbeef/series/16166">previous posts</a> in this series for different ways to &#8220;cache&#8221; the sprite information.)</p>

<h3>Render Targets</h3>

<p>But in this post we are talking about render targets - which is a way of rendering a bunch of sprites (or any other renderable thing) just once, and then treating the whole group of sprites as a single sprite. This is <em>faster</em>, simpler, and enables some neat effects.</p>

<p>The code only needs minor changes to switch the cloud grid to using a render target instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Move cloud grid creation into a helper method</span>
</span><span class='line'><span class="k">def</span> <span class="nf">make_clouds</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">clouds</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">6</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="n">clouds</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">*</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">h</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">w</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;sprites/cloud.png&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Similar to `args.outputs`,</span>
</span><span class='line'>  <span class="c1"># render targets have `.sprites`, `.solids`, etc.</span>
</span><span class='line'>  <span class="c1"># The argument will be used as the path below</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">render_target</span><span class="p">(</span><span class="ss">:clouds</span><span class="p">)</span><span class="o">.</span><span class="n">sprites</span> <span class="o">&lt;&lt;</span> <span class="n">clouds</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Set up the render target on the first tick</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">tick_count</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">make_clouds</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Output a single sprite</span>
</span><span class='line'>  <span class="c1"># located at 0,0 and the size of the whole grid</span>
</span><span class='line'>  <span class="c1"># created in `make_clouds`</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">sprites</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">250</span> <span class="o">*</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">250</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">path</span><span class="p">:</span> <span class="ss">:clouds</span> <span class="c1"># Name of the render target!</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For convenience, the code above moves the creation of the cloud grid and the render target into a helper method which gets called on the first tick of the game.</p>

<p><code>args.render_target(:clouds)</code> automatically creates a new render target named <code>:clouds</code> if it does not already exist. Then we can render things to it just as if it were <code>args.outputs</code>.</p>

<p>Interestingly, render targets do not seem to have an innate width or height. In order to avoid unintentional scaling, you will need to &#8220;know&#8221; how big the render target is. In this case, we know it is a 6x3 grid of 250x250 images, so the size is fairly straightforward. I left the math in to make it clearer.</p>

<p>Finally, we reference the render target similarly to an image file, but pass in the name of the render target as the <code>:path</code> instead of an actual file path.</p>

<h2>Static Sprites, Too!</h2>

<p><a href="https://blog.presidentbeef.com/blog/2022/01/08/dragon-ruby-static-outputs/">As explored in a different post</a>, we can use <code>static_sprites</code> to &#8220;render&#8221; the sprite <em>once</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># No changes here</span>
</span><span class='line'><span class="k">def</span> <span class="nf">make_clouds</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">clouds</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">6</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="n">clouds</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">*</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">h</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">w</span><span class="p">:</span> <span class="mi">250</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;sprites/cloud.png&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">render_target</span><span class="p">(</span><span class="ss">:clouds</span><span class="p">)</span><span class="o">.</span><span class="n">sprites</span> <span class="o">&lt;&lt;</span> <span class="n">clouds</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">tick_count</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">make_clouds</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Create the clouds sprite once</span>
</span><span class='line'>    <span class="c1"># and keep it in `args.state`.</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">clouds</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">w</span><span class="p">:</span> <span class="mi">250</span> <span class="o">*</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">h</span><span class="p">:</span> <span class="mi">250</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">path</span><span class="p">:</span> <span class="ss">:clouds</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add the clouds sprite just once</span>
</span><span class='line'>    <span class="c1"># as a &quot;static&quot; sprite</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">static_sprites</span> <span class="o">&lt;&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">clouds</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we can move the clouds around just by changing the attributes on the render target.</p>

<p>Adding a little bit of code at the end of <code>tick</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">clouds</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="no">Math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">tick_count</span> <span class="o">/</span> <span class="mi">20</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-</span> <span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure>


<p>(The calculation and numbers aren&#8217;t really important here, I just fiddled around until something looked decent.)</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw1qpqotbcg6pfpqo2bq.gif" alt="Clouds moving back and forth" /></p>

<p>Oh hey! Those extra pixels on the sides of the cloud grid actually came in handy.</p>

<h3>What Else?</h3>

<p>Remember, the entire render target is like one sprite now. That means all the regular sprite attributes (e.g. color, size, blending, flipping, rotation) can be applied to the entire thing at once.</p>

<p><em>Wait, did you say rotation?</em></p>

<p>Sure, let&#8217;s make ourselves dizzy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">clouds</span><span class="o">.</span><span class="n">angle</span> <span class="o">=</span> <span class="p">(</span><span class="no">Math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">tick_count</span> <span class="o">/</span> <span class="mi">120</span><span class="p">)</span> <span class="o">*</span> <span class="mi">180</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5n2ug9ehwbn8yzh2orq.gif" alt="Spinning clouds" /></p>

<p>Okay, that&#8217;s as deep as we&#8217;ll go on render targets in this post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DragonRuby: Object-Oriented Starter]]></title>
    <link href="https://blog.presidentbeef.com/blog/2022/01/15/a-object-oriented-starter-for-dragonruby/"/>
    <updated>2022-01-15T11:00:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2022/01/15/a-object-oriented-starter-for-dragonruby</id>
    <content type="html"><![CDATA[<p>I enjoy playing with the <a href="https://dragonruby.itch.io/dragonruby-gtk">DragonRuby Game Toolkit</a>, but the <a href="http://docs.dragonruby.org/">documentation</a> and many of the examples are very much intended for non-Rubyists. Additionally, as a game engine, it&#8217;s more data/functionally-oriented than most Rubyists are used to. For example, the main game loop in the <code>tick</code> method needs to be implemented as a top-level method.</p>

<p>This post walks through structuring a game in a way that is a little more familiar to Rubyists.</p>

<p><em>Caveat!</em> I am new to DragonRuby myself and this is not meant to be the &#8220;correct&#8221; or &#8220;best&#8221; or even &#8220;great&#8221; way to organize your code. It&#8217;s just a pattern I&#8217;ve started using and it might be useful for you!</p>

<p>(By the way, while DragonRuby is a commercial product, you can often <a href="https://dragonruby.itch.io/dragonruby-gtk">grab a free copy</a>. Keep an eye out for sales!)</p>

<h3>Starting Example</h3>

<p>First, let&#8217;s start with some code that isn&#8217;t using any class definitions at all. Everything happens inside <code>tick</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Set up player object</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">player</span> <span class="o">||=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Move player based on keyboard input</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">keyboard</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">args</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">keyboard</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">args</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">keyboard</span><span class="o">.</span><span class="n">down</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">args</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">keyboard</span><span class="o">.</span><span class="n">up</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Render the &quot;player&quot; as a square to the screen</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">player</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79w79at48p6lh0zeo08r.gif" alt="DragonRuby Example - Moving a black square around" /></p>

<p>As a reminder, DragonRuby automatically loads up code from a file called <code>mygame/app/main.rb</code> and then calls <code>tick</code> 60 times per second.</p>

<p><code>args.state</code> is like an OpenStruct where you can add on whatever attributes you want and store whatever you would like. In this case, we add a hash that we name <code>player</code>.</p>

<p>The code then checks for keyboard input and adjusts the position of the &#8220;player&#8221;. (To keep things very simple, we don&#8217;t worry about keeping the player on the screen.)</p>

<p>Finally, we render the &#8220;player&#8221; as a solid square.</p>

<p>This is simple enough and the code isn&#8217;t too complicated. But, just for fun, let&#8217;s slowly transform it to be a little more &#8220;object-oriented&#8221;.</p>

<h3>Game Object</h3>

<p>First, let&#8217;s create a main &#8220;game&#8221; object to hold our logic, instead of putting it all in <code>tick</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyGame</span>
</span><span class='line'>  <span class="c1"># Adds convenience methods for args, gtk, keyboard, etc.</span>
</span><span class='line'>  <span class="n">attr_gtk</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">player</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">x</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">y</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">w</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">h</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tick</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>      <span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>      <span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">down</span>
</span><span class='line'>      <span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">up</span>
</span><span class='line'>      <span class="n">state</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="n">state</span><span class="o">.</span><span class="n">player</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span> <span class="o">||=</span> <span class="no">MyGame</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">tick</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>tick</code> method only sets up the global <code>$my_game</code> on the first tick, then sets <code>args</code> on each tick and calls the game&#8217;s <code>tick</code> method.</p>

<p>(<em>Tangent alert!</em> Is it necessary to set <code>args</code> on every tick? Not strictly - you could set <code>self.args = args</code> in <code>initialize</code> and it will work okay. But if you want to use DragonRuby&#8217;s unit test framework, it may cause problems because each test has a fresh copy of <code>args</code>.)</p>

<p>Using <code>attr_gtk</code> allows the code to be a bit shorter. <code>args</code>, <code>state</code>, <code>keyboard</code>, <a href="http://docs.dragonruby.org/#----attr_gtk-rb">and more</a> now have convenience methods for them.</p>

<h3>Instance Variables Instead of State</h3>

<p><code>args.state</code> is essentially a global variable space. This is a big convenience when a game is all top-level methods - otherwise you would have to figure out where to stash all your game state yourself.</p>

<p>However, it&#8217;s not required to use it.</p>

<p>The code below uses <code>@player</code> to store the player hash, instead of <code>args.state</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyGame</span>
</span><span class='line'>  <span class="n">attr_gtk</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:player</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@player</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">x</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">y</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">w</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">h</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tick</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">down</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">up</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="n">player</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span> <span class="o">||=</span> <span class="no">MyGame</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">tick</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing that has thrown me off with DragonRuby is understanding just how much &#8220;regular&#8221; Ruby I can use. For the most part, other than how the <code>tick</code> method is used as the main game loop, you can use the Ruby language constructs you are comfortable with.</p>

<h3>Splitting Things Up</h3>

<p>No big change here, but as a game grows it&#8217;s easier to split the steps of each game loop into different methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyGame</span>
</span><span class='line'>  <span class="n">attr_gtk</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:player</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@player</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">x</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">y</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">w</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">h</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tick</span>
</span><span class='line'>    <span class="n">handle_input</span>
</span><span class='line'>    <span class="n">render</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">handle_input</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">down</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">up</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="n">player</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span> <span class="o">||=</span> <span class="no">MyGame</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">tick</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Player Class</h3>

<p>Final step in this post - let&#8217;s move the &#8220;player&#8221; out to a separate class.</p>

<p>In this example, it might not make a lot of sense. But in most games there will be a lot of state and logic you might want to associate with the &#8220;player&#8221; or any other objects in the game. Having it be its own class helps keep the logic in one place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyGame</span>
</span><span class='line'>  <span class="n">attr_gtk</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:player</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">w</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">h</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tick</span>
</span><span class='line'>    <span class="n">handle_input</span>
</span><span class='line'>    <span class="n">render</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">handle_input</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">down</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">keyboard</span><span class="o">.</span><span class="n">up</span>
</span><span class='line'>      <span class="n">player</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">render</span>
</span><span class='line'>    <span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="n">player</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>  <span class="n">attr_sprite</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="vi">@w</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>    <span class="vi">@h</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span> <span class="o">||=</span> <span class="no">MyGame</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
</span><span class='line'>  <span class="vg">$my_game</span><span class="o">.</span><span class="n">tick</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the code uses another DragonRuby convenience. <code>attr_sprite</code> adds a bunch of <a href="http://docs.dragonruby.org/#----attr_sprite-rb">helper methods</a> that allow you to use any object as a sprite/solid/border, etc. (Note that the code still passes <code>player</code> into <code>outputs.solids</code> and DragonRuby treats it as a solid. If it were passed into <code>outputs.sprites</code> then it would be treated like a sprite instead!)</p>

<h3>Separate Files?</h3>

<p>For the sake of a blog post, all the code is together. But there is no reason not to start splitting the code across separate files.</p>

<p>But! In DragonRuby there is one weirdness with <code>require</code>: you must include the file extension (usually <code>.rb</code>), while in regular Ruby that is usually omitted.</p>

<h2>Wrapping Up</h2>

<p>Did our code become longer and less straight-forward? Yes, for this small example, definitely.</p>

<p>But as a game (or any project) grows, pulling bits out into modular pieces is going to be an advantage. Personally I fall back on this structure pretty quickly when I start a new DragonRuby project.</p>

<p>Hopefully this post is useful to Rubyists trying to get into DragonRuby!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DragonRuby: Static Outputs]]></title>
    <link href="https://blog.presidentbeef.com/blog/2022/01/08/dragon-ruby-static-outputs/"/>
    <updated>2022-01-08T11:00:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2022/01/08/dragon-ruby-static-outputs</id>
    <content type="html"><![CDATA[<p>In a <a href="https://dev.to/presidentbeef/api-levels-in-dragonruby-game-toolkit-4jb4">previous post</a> we looked at different ways to render outputs (sprites, rectangles, lines, etc.) in the <a href="https://dragonruby.org/toolkit/game">DragonRuby Game Toolkit</a>.</p>

<p>The post ended by hinting at a more efficient way to render outputs instead of adding them to e.g. <code>args.outputs.solids</code> or <code>args.outputs.sprites</code> each tick.</p>

<p>This post explores the world of &#8220;static outputs&#8221;!</p>

<h2>Static What?</h2>

<p>First of all, we should address the most confusing part of all this.</p>

<p><strong>&#8220;Static&#8221; does not mean the images don&#8217;t move or change.</strong> Instead, it means that render &#8220;queue&#8221; is not cleared after every tick.</p>

<p>Normally, one would load up the queue each tick, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Render a black rectangle</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>  <span class="c1"># width</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">400</span>   <span class="c1"># height</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this is kind of wasteful. We are creating a new hash table each tick (60 ticks/second) and then throwing it away. Also each tick we are filling up the <code>args.outputs.solids</code> queue and then emptying it.</p>

<p>Instead, why not create the hash table once, load up the queue once, and then re-use them?</p>

<p>That&#8217;s the idea of static outputs!</p>

<p>There are static versions for each rendered type:</p>

<ul>
<li><code>args.outputs.static_borders</code></li>
<li><code>args.outputs.static_labels</code></li>
<li><code>args.outputs.static_primitives</code></li>
<li><code>args.outputs.static_solids</code></li>
<li><code>args.outputs.static_sprites</code></li>
</ul>


<h2>Going Static</h2>

<h3>Starting Out</h3>

<p>Here&#8217;s an example with comments explaining what the code is doing. This &#8220;game&#8221; simply moves a square back and forth across the screen. This is the entire program!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="c1"># Initialize the x location of the square</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">x</span> <span class="o">||=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Initialize the direction/velocity</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span> <span class="o">||=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># If we hit the sides, change direction</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">right</span> <span class="ow">or</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="o">-</span><span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Update the x location</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Build the square</span>
</span><span class='line'>  <span class="n">square</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Add the square to the render queue</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="n">square</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting output looks like:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o56m4w483wxr46y07zh0.gif" alt="Image description" /></p>

<p>This example introduces <code>args.state</code>. This is basically a persistent bag you can throw anything into. (For Rubyists - this is like <a href="https://ruby-doc.org/stdlib-3.1.0/libdoc/ostruct/rdoc/OpenStruct.html">OpenStruct</a>.)</p>

<p><code>x</code> and <code>direction</code> are not special, they are just variables we are defining. We use <code>||=</code> to initialize them because we only want to set the values on the first tick.</p>

<p>This example illustrates the point from above - every tick it creates a new square and adds it to the queue. The queue is emptied out and then the code starts all over again.</p>

<p>Seems wasteful, right?</p>

<h3>Caching the Objects</h3>

<p>First thing I think of is - &#8220;why not create the square once, then just update the object each tick? Does that work?&#8221; Yes! It does.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span> <span class="o">||=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span> <span class="o">||=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">right</span> <span class="ow">or</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="o">-</span><span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">+=</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, we create the <code>square</code> only once and then store it in <code>args.state.square</code>.</p>

<p>Instead of having a separate <code>x</code> variable, the code updates the <code>x</code> property on the square directly.</p>

<p>This is <em>better</em>, but we are still updating <code>args.outputs.solids</code> each tick.</p>

<h3>Full Static</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span> <span class="o">||=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span> <span class="o">||=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># On the first tick, add the square to the render queue</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">tick_count</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">static_solids</span> <span class="o">&lt;&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">right</span> <span class="ow">or</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">grid</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="o">-</span><span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">square</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">+=</span> <span class="n">args</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">direction</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, we use the fact that the first <code>args.tick_count</code> is <code>0</code> to add the <code>square</code> to <code>args.outputs.static_solids</code> just <em>once</em>. It will continue to be rendered on each tick.</p>

<h2>Performance</h2>

<p>Intuitively, since the code is doing less, it should be faster. But does it really make a difference?</p>

<p>It depends on your game, how much it&#8217;s doing per tick, how many sprites you are rendering, and what platform/hardware it&#8217;s running on.</p>

<p>The examples above? Not going to see any difference using <code>static_solids</code>.</p>

<p>But DragonRuby contains two examples that directly compare <code>args.outputs.sprites</code> vs. <code>args.outputs.static_sprites</code> (<a href="http://docs.dragonruby.org/#----performance---sprites-as-classes---main-rb">here</a> and <a href="http://docs.dragonruby.org/#----performance---static-sprites-as-classes---main-rb">here</a>).</p>

<p>In these examples, you can play with the number of &#8220;stars&#8221; rendered to see different performance. On my ancient laptop, I do not see a performance difference until around 3,000 stars.</p>

<p>Your mileage may vary, though!</p>

<h2>Should I Always Use the Static Versions?</h2>

<p>It depends! Probably not?</p>

<p>If your code mainly manipulates the same objects around the screen <em>and</em> always renders them in the same order, then using the <code>static_</code> approach might be simpler and faster.</p>

<p>But in many cases it might be easier to simply set up the render queues each tick, especially if the objects rendered or their ordering change regularly. Otherwise, managing the state of the rendering queues can become cumbersome. (We haven&#8217;t even talked about clearing the static queues, for example.)</p>

<p>Some of this comes down to personal preference and how you would like to structure your code. But hopefully this post has helped explain how to use the <code>args.outputs.static_*</code> methods in your game!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Levels in DragonRuby Game Toolkit]]></title>
    <link href="https://blog.presidentbeef.com/blog/2022/01/05/api-levels-in-dragonruby-game-toolkit/"/>
    <updated>2022-01-05T11:00:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2022/01/05/api-levels-in-dragonruby-game-toolkit</id>
    <content type="html"><![CDATA[<p><a href="https://dragonruby.org/toolkit/game">DragonRuby Game Toolkit (DRGTK)</a> is a 2D game engine built with <a href="https://mruby.org/">mRuby</a>, <a href="https://www.libsdl.org/">SDL</a>, and <a href="https://llvm.org/">LLVM</a>. It&#8217;s meant to be tiny, fast, and allow you to turn out games quickly using <a href="https://www.ruby-lang.org/">Ruby</a>.</p>

<p>Unfortunately, since the documentation is focused on making games <em>quickly</em>, I sometimes get lost when trying to figure out how to do things that should be simple. DragonRuby seems to have borrowed Perl&#8217;s &#8221;<a href="https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it">There&#8217;s more than one way to do it</a>&#8221; philosophy because for anything you want to do with the API there are <em>several</em> ways to do it.</p>

<p>The documentation and examples tend to focus on the simplest forms (which is fine) but then require digging and experimentation to figure out the rest.</p>

<p>To help explain/document the different API options, this post will go through different methods of rendering images (well, rectangles mostly).</p>

<h2>API Levels</h2>

<h3>Level 0 - Getting Started</h3>

<p>The main object one interacts with in DragonRuby is canonically called <code>args</code> (always accessible with <code>$gtk.args</code>&#8230; because there&#8217;s more than one way!)</p>

<p>To output <em>things</em>, like shapes, sprites, or sounds, you can use the &#8220;shovel&#8221; operator <code>&lt;&lt;</code> on <code>args.outputs</code> - like <code>args.outputs.sprites</code> or <code>args.outputs.sounds</code>.</p>

<p>For these &#8220;basic&#8221; objects, you&#8217;ll need to shovel <em>things</em> in on every &#8220;tick&#8221; of the game engine.</p>

<p>This is a complete DragonRuby example to output a rectangle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, so good.</p>

<p>(You can assume the rest of the examples below are inside a <code>tick</code> method if it&#8217;s not explicitly defined.)</p>

<h3>Level 1 - Arrays</h3>

<p>The documentation usually starts off by passing <em>things</em> to <code>args.outputs</code> as arrays - essentially positional arguments.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>What does that do? I&#8217;m not quite sure!</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9aobr3f41cbih3kpa95.png" alt="A black rectangle on a gray background" /></p>

<p>Okay - it shows a black rectangle on the screen. Not that exciting, but useful enough for our examples.</p>

<p>The problem with using arrays though is remembering which index in the array is which attribute. On top of that, it&#8217;s not even recommended to pass in arrays because they are slow (for some reason).</p>

<h3>Level 2 - Hashes</h3>

<p>What is better than arrays? Hashes! (Hash tables/associative arrays for anyone not familiar with Ruby.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">w</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>  <span class="c1"># width</span>
</span><span class='line'>  <span class="ss">h</span><span class="p">:</span> <span class="mi">400</span>   <span class="c1"># height</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, that&#8217;s way easier to understand!</p>

<p>And there are more options, too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">solids</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">w</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">h</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">r</span><span class="p">:</span> <span class="mi">255</span><span class="p">,</span>  <span class="c1"># red</span>
</span><span class='line'>  <span class="ss">g</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>  <span class="c1"># green</span>
</span><span class='line'>  <span class="ss">b</span><span class="p">:</span> <span class="mi">255</span><span class="p">,</span>  <span class="c1"># blue</span>
</span><span class='line'>  <span class="ss">a</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>  <span class="c1"># alpha</span>
</span><span class='line'>  <span class="ss">blendmode_enum</span><span class="p">:</span> <span class="mi">0</span>  <span class="c1"># blend mode</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Level 3 - Primitives</h3>

<p>But there is yet another way&#8230; instead of using <code>args.outputs.solids</code>, <code>args.outputs.labels</code>, <code>args.outputs.sprites</code>, etc., we can output a hash to <code>args.outputs.primitives</code> but mark it as the right primitive &#8220;type&#8221;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">primitives</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">w</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">h</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">r</span><span class="p">:</span> <span class="mi">255</span><span class="p">,</span>  <span class="c1"># red</span>
</span><span class='line'>  <span class="ss">g</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>  <span class="c1"># green</span>
</span><span class='line'>  <span class="ss">b</span><span class="p">:</span> <span class="mi">255</span><span class="p">,</span>  <span class="c1"># blue</span>
</span><span class='line'>  <span class="ss">a</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>  <span class="c1"># alpha</span>
</span><span class='line'>  <span class="ss">blendmode_enum</span><span class="p">:</span> <span class="mi">0</span>  <span class="c1"># blend mode</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">solid!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Weird, but okay. Why might one want to do this? See the &#8220;Layers&#8221; section down below!</p>

<h3>Level 4 - Classes</h3>

<p>Finally, probably the most natural for a Rubyist: just use a class!</p>

<p>To do this, you <em>must</em> define all the methods expected for the type of primitive, plus define a method called <code>primitive_marker</code> that returns the type of primitive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ACoolSolid</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:w</span><span class="p">,</span> <span class="ss">:h</span><span class="p">,</span> <span class="ss">:r</span><span class="p">,</span> <span class="ss">:g</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:blendmode_enum</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="vi">@w</span> <span class="o">=</span> <span class="n">w</span>
</span><span class='line'>    <span class="vi">@h</span> <span class="o">=</span> <span class="n">h</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">primitive_marker</span>
</span><span class='line'>    <span class="ss">:solid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">primitives</span> <span class="o">&lt;&lt;</span> <span class="no">ACoolSolid</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of defining a bunch of methods with <code>attr_reader</code>, you can use <code>attr_sprite</code> instead which is a DragonRuby shortcut method to do the same thing.</p>

<h2>Layers</h2>

<p>DragonRuby renders outputs in this order (from back to front):</p>

<ul>
<li>Solids</li>
<li>Sprites</li>
<li>Primitives</li>
<li>Labels</li>
<li>Lines</li>
<li>Borders</li>
</ul>


<p>For each &#8220;layer&#8221; the objects are rendered in FIFO order - the first things in the queue are rendered first.</p>

<p>But wait&#8230; one of these things is not like the others. Doesn&#8217;t <code>primitives</code> just hold things like solids, sprites, labels&#8230;?</p>

<p>Yes!</p>

<p>But using <code>primitives</code> enables better control over render order.</p>

<p>For example, what if we want to render a rectangle on top of a sprite? With the fixed rendering order above, it&#8217;s impossible! But by using <code>args.outputs.primitives</code> we can do it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">a_solid</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">solid!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">a_sprite</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">x</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">w</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">h</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;metadata/icon.png&#39;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">sprite!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">primitives</span> <span class="o">&lt;&lt;</span> <span class="n">a_sprite</span> <span class="o">&lt;&lt;</span> <span class="n">a_solid</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&#8217;s the proof:</p>

<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1596wyp7n71lwya3f2c.png" alt="Screenshot showing a black rectangle on top of the DragonRuby logo" /></p>

<h2>Every Tick?</h2>

<p><code>args.outputs.sprites</code>, etc. get cleared after each call to <code>tick</code>. So every tick we have to recreate all the objects and pass them in to <code>args.outputs</code>. Seems wasteful, right? Yes, it is!</p>

<p>It&#8217;s somewhat odd that most DragonRuby examples show creating arrays or hashes for primitives each tick. It made me think somehow the rendering process was destructive - were the things added into <code>args.outputs</code> destroyed or modified in some way?</p>

<p>Turns out, no. It is fine to create e.g. a sprite representation once and render the same object each time.</p>

<p>Here we&#8217;ll use a global for demonstration purposes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ACoolSolid</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:w</span><span class="p">,</span> <span class="ss">:h</span><span class="p">,</span> <span class="ss">:r</span><span class="p">,</span> <span class="ss">:g</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:blendmode_enum</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="vi">@w</span> <span class="o">=</span> <span class="n">w</span>
</span><span class='line'>    <span class="vi">@h</span> <span class="o">=</span> <span class="n">h</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">primitive_marker</span>
</span><span class='line'>    <span class="ss">:solid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$a_solid</span> <span class="o">=</span> <span class="no">ACoolSolid</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span> <span class="n">args</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">outputs</span><span class="o">.</span><span class="n">primitives</span> <span class="o">&lt;&lt;</span> <span class="vg">$a_solid</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>But Wait&#8230;</h3>

<p>We are still shoveling an object into <code>args.outputs.primitives</code> each time. Surely that is unnecessary?</p>

<p>Correct! There are <a href="http://docs.dragonruby.org/#------static_solids-"><em>static</em> versions</a> for each <code>args.outputs</code> (e.g. <code>args.outputs.static_solids</code>) that do <em>not</em> get cleared every tick.</p>

<p>Naturally, this is more efficient than creating objects and updating the outputs 60 times per second.</p>

<p>We&#8217;ll explore these options in a future post, but be aware they are available!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Just One False Positive in Brakeman]]></title>
    <link href="https://blog.presidentbeef.com/blog/2021/11/08/fixing-just-one-false-positive-in-brakeman/"/>
    <updated>2021-11-08T11:30:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2021/11/08/fixing-just-one-false-positive-in-brakeman</id>
    <content type="html"><![CDATA[<p>A while ago, I came across a <a href="https://brakemanscanner.org/">Brakeman</a> false positive that I wanted to fix.</p>

<p>For just one false positive, it became a bit of an epic journey.</p>

<p>The code looked something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">enum</span> <span class="ss">status</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">pending</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">success</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">failed</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="no">NOT_FAILURES</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;pending&#39;</span><span class="p">,</span> <span class="s1">&#39;success&#39;</span><span class="o">].</span><span class="n">freeze</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TaskRunner</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_failures</span>
</span><span class='line'>    <span class="n">start_time</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">beginning_of_quarter</span>
</span><span class='line'>    <span class="n">end_time</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">end_of_quarter</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">no_failure_enums</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="o">*</span><span class="no">Task</span><span class="o">::</span><span class="no">NOT_FAILURES</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span> <span class="o">=</span> <span class="o">&lt;&lt;~</span><span class="no">QUERY</span>
</span><span class='line'>      <span class="no">SELECT</span> <span class="no">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>      <span class="no">FROM</span> <span class="sb">`tasks`</span>
</span><span class='line'>      <span class="no">WHERE</span> <span class="sb">`tasks`</span><span class="o">.</span><span class="n">`status</span><span class="sb">` NOT IN (</span><span class="si">#{</span><span class="n">no_failure_enums</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="sb">)</span>
</span><span class='line'><span class="sb">      AND `</span><span class="n">tasks</span><span class="sb">`.`</span><span class="n">time_end</span><span class="sb">` BETWEEN </span><span class="si">#{</span><span class="n">start_time</span><span class="si">}</span><span class="sb"> AND </span><span class="si">#{</span><span class="n">end_time</span><span class="si">}</span><span class="sb"></span>
</span><span class='line'><span class="sb">    QUERY</span>
</span><span class='line'>
</span><span class='line'><span class="sb">    # Line below triggers a SQL injection warning</span>
</span><span class='line'><span class="sb">    Task.connection.select_all(query)</span>
</span><span class='line'><span class="sb">  end</span>
</span><span class='line'><span class="sb">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(You can imagine in reality the query is a bit more complicated and justifies writing it this way.)</p>

<p>This code results in an SQL injection warning from Brakeman:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Confidence</span><span class="p">:</span> <span class="no">High</span>
</span><span class='line'><span class="ss">Category</span><span class="p">:</span> <span class="no">SQL</span> <span class="no">Injection</span>
</span><span class='line'><span class="ss">Check</span><span class="p">:</span> <span class="no">SQL</span>
</span><span class='line'><span class="ss">Message</span><span class="p">:</span> <span class="no">Possible</span> <span class="no">SQL</span> <span class="n">injection</span>
</span><span class='line'><span class="ss">Code</span><span class="p">:</span> <span class="no">Task</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="s2">&quot;SELECT COUNT(*)</span><span class="se">\n</span><span class="s2">FROM `filings`</span><span class="se">\n</span><span class="s2">WHERE `filings`.`status` NOT IN (</span><span class="si">#{</span><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="o">*[</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">)</span><span class="se">\n</span><span class="s2">AND `filings`.`time_end` BETWEEN </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">beginning_of_quarter</span><span class="si">}</span><span class="s2"> AND </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">end_of_quarter</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="ss">File</span><span class="p">:</span> <span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">task</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="ss">Line</span><span class="p">:</span> <span class="mi">25</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a little hard to read, so let&#8217;s take a look at a better formatted version of the code Brakeman is complaining about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;SELECT COUNT(*) \</span>
</span><span class='line'><span class="s2">  FROM `filings` \</span>
</span><span class='line'><span class="s2">  WHERE `filings`.`status` NOT IN (</span><span class="si">#{</span><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="o">*[</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">) \</span>
</span><span class='line'><span class="s2">  AND `filings`.`time_end` BETWEEN </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">beginning_of_quarter</span><span class="si">}</span><span class="s2"> \</span>
</span><span class='line'><span class="s2">  AND </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">end_of_quarter</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Brakeman is warning about this SQL query because it is using string interpolation to unsafely add in values to the query. If an attacker could control those values, they could modify the SQL run by the database.</p>

<p>In particular, it&#8217;s warning about</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="o">*[</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(the value in <code>no_failure_enums.join(',')</code>).</p>

<p>However, in this case, we know that <code>Task.statuses</code> is actually a constant - it&#8217;s defined using <a href="https://api.rubyonrails.org/v5.2.4.4/classes/ActiveRecord/Enum.html"><code>enum</code></a> in the <code>Task</code> class. This code is just grabbing the integer values for the given enums and joining them back into a comma-separated string.</p>

<p>So how do we get Brakeman to understand that this value is actually safe?</p>

<h2>Splatted Arrays</h2>

<p>Let&#8217;s dive in!</p>

<p>The call we care about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="o">*[</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>First up is <code>*["pending", "success"]</code>. This code converts an array of strings to individual method arguments (i.e., <code>values_at("pending", "success")</code>.</p>

<p>This is pretty easy to handle. In the case where a splatted array is the only argument to a method, just use the elements of the array as the argument list. (Check out the <a href="https://github.com/presidentbeef/brakeman/pull/1564">pull request here</a>)</p>

<p>This gets us to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Better!</p>

<h2>Hash Values</h2>

<p>In this case, <code>values_at</code> is <a href="https://rdoc.info/stdlib/core/Hash:values_at"><code>Hash#values_at</code></a> - it returns an array of values from the hash table for the given keys.</p>

<p>This is also not too difficult to implement. I went ahead and covered <code>Hash#values</code> at the same time. (Check out the <a href="https://github.com/presidentbeef/brakeman/pull/1595">pull request here</a>)</p>

<p>Brakeman will now do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:a</span><span class="p">,</span> <span class="ss">:c</span><span class="p">)</span>  <span class="c1">#=&gt; [1, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! Back to our code sample, how does it look now?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh&#8230; it looks exactly the same because Brakeman has no idea what <code>Task.statuses</code> is.</p>

<p>Okay, no problem. We just need to implement support for ActiveRecord&#8217;s <code>enum</code>.</p>

<h2>Detour!</h2>

<p>Here I took a little detour. <code>Task.statuses</code> is a method that returns a hash value. Instead of just implementing that, I thought this would be a good time to support methods with single, simple return values.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">sound</span>
</span><span class='line'>    <span class="s1">&#39;bark&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If Brakeman could know that <code>Dog.sound</code> returns <code>'bark'</code>, I could implement enums as method definitions that return simple arrays or hashes. (More on this later!)</p>

<p>To implement this functionality, I rewrote how Brakeman tracks methods (as real objects) and updated some method lookup code.</p>

<p>The details aren&#8217;t particularly interesting, but the <a href="https://github.com/presidentbeef/brakeman/pull/1596">code changes are here</a>.</p>

<h2>Back to Enums</h2>

<p>Calling <code>enum</code> essentially defines a bunch of methods.</p>

<p>For example this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">enum</span> <span class="ss">status</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">pending</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">success</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">failed</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will define methods like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span> <span class="c1"># the one we care about!</span>
</span><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'><span class="no">Task</span><span class="c1">#status</span>
</span><span class='line'><span class="no">Task</span><span class="c1">#pending?</span>
</span><span class='line'><span class="no">Task</span><span class="c1">#success?</span>
</span><span class='line'><span class="c1"># ..etc.</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass in an explicit hash mapping keys to values or just an array of keys and Rails will do the mapping.</p>

<p>To implement this in Brakeman, we simulate the creation of the <code>status</code> and <code>statuses</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">statuses</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">pending</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">success</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">failed</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then rely on the previous changes for <code>Task.statuses</code> now returning a hash.</p>

<h2>Another Detour</h2>

<p>You might have noticed that the enum definition uses <code>status</code> but we need <code>statuses</code>.</p>

<p>This required <a href="https://github.com/presidentbeef/brakeman/commit/c27f44ab8bf1d8dfad6c5e5908ba621ec067f9a7">a tiny tweak</a> to Brakeman&#8217;s extremely over-simplified <code>pluralize</code>.</p>

<h2>Back to the False Positive</h2>

<p>Where are we now?</p>

<p>With <code>enum</code> support and proper pluralization, this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="o">*[</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gets reduced like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="ss">pending</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">success</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">failed</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="o">*[</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="ss">pending</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">success</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">failed</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="s2">&quot;pending&quot;</span><span class="p">,</span> <span class="s2">&quot;success&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="ss">:BRAKEMAN_SAFE_LITERAL</span><span class="p">,</span> <span class="ss">:BRAKEMAN_SAFE_LITERAL</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;BRAKEMAN_SAFE_LITERAL,BRAKEMAN_SAFE_LITERAL&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well&#8230; it&#8217;s not perfect. Note that the array values are strings, but our enum uses symbol keys. But Brakeman knows the enum is all literal values which are safe, so we end up with this.</p>

<p>The query now looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;SELECT COUNT(*) \</span>
</span><span class='line'><span class="s2">  FROM `filings` \</span>
</span><span class='line'><span class="s2">  WHERE `filings`.`status` NOT IN (</span><span class="si">#{</span><span class="s2">&quot;BRAKEMAN_SAFE_LITERAL,BRAKEMAN_SAFE_LITERAL&quot;</span><span class="si">}</span><span class="s2">) \</span>
</span><span class='line'><span class="s2">  AND `filings`.`time_end` BETWEEN </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">beginning_of_quarter</span><span class="si">}</span><span class="s2"> \</span>
</span><span class='line'><span class="s2">  AND </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">end_of_quarter</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, not perfect but at least Brakeman isn&#8217;t going to warn about interpolating a string literal into the query.</p>

<h2>Not Done Yet</h2>

<p>Ah, but wait. The warning is not gone!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Confidence</span><span class="p">:</span> <span class="no">Medium</span>
</span><span class='line'><span class="ss">Category</span><span class="p">:</span> <span class="no">SQL</span> <span class="no">Injection</span>
</span><span class='line'><span class="ss">Check</span><span class="p">:</span> <span class="no">SQL</span>
</span><span class='line'><span class="ss">Message</span><span class="p">:</span> <span class="no">Possible</span> <span class="no">SQL</span> <span class="n">injection</span>
</span><span class='line'><span class="ss">Code</span><span class="p">:</span> <span class="no">Task</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="s2">&quot;SELECT COUNT(*)</span><span class="se">\n</span><span class="s2">FROM `filings`</span><span class="se">\n</span><span class="s2">WHERE `filings`.`status` NOT IN (</span><span class="si">#{</span><span class="s2">&quot;BRAKEMAN_SAFE_LITERAL,BRAKEMAN_SAFE_LITERAL&quot;</span><span class="si">}</span><span class="s2">)</span><span class="se">\n</span><span class="s2">AND `filings`.`time_end` BETWEEN </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">beginning_of_quarter</span><span class="si">}</span><span class="s2"> AND </span><span class="si">#{</span><span class="no">Date</span><span class="o">.</span><span class="n">end_of_quarter</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="ss">File</span><span class="p">:</span> <span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">task</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="ss">Line</span><span class="p">:</span> <span class="mi">25</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s wrong now?</p>

<p>Brakeman doesn&#8217;t know what <code>Date.beginning_of_quarter</code> or <code>Date.end_of_quarter</code> are, so it generates a lower confidence warning about it. For SQL injection, Brakeman is pretty paranoid about any string interpolation, even if it&#8217;s not sure the values are &#8220;dangerous&#8221;.</p>

<p>But anything coming from <code>Date</code> is likely to be safe, so now <a href="https://github.com/presidentbeef/brakeman/pull/1615">Brakeman ignores <code>Date</code> calls in SQL</a>.</p>

<h2>Whew. Done?</h2>

<p>Yep - now that code will no longer warn.</p>

<p>Except&#8230; in the months it took me to address this false positive, the code has changed in such a way that Brakeman now has a false <em>negative</em> problem (should be warning about some things, but isn&#8217;t). But that&#8217;s a different problem for a different day.</p>

<p>At least that one false positive is fixed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 6.1 SQL Injection Updates]]></title>
    <link href="https://blog.presidentbeef.com/blog/2021/07/21/rails-6-dot-1-sql-injection-updates/"/>
    <updated>2021-07-21T12:14:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2021/07/21/rails-6-dot-1-sql-injection-updates</id>
    <content type="html"><![CDATA[<p>Since early 2013, I have been maintaining <a href="https://rails-sqli.org">rails-sqli.org</a>, a collection of Rails ActiveRecord methods that can be vulnerable to <a href="https://guides.rubyonrails.org/security.html#sql-injection">SQL injection</a>.</p>

<p>Rails 6 has been out <a href="https://guides.rubyonrails.org/6_0_release_notes.html">since December 2019</a>, but sadly the site has been missing information about changes and new methods in Rails 6.</p>

<p>As that deficiency has recently been rectified, let&#8217;s walk through what has changed since Rails 5!</p>

<h2><code>delete_all</code>, <code>destroy_all</code></h2>

<p>In earlier versions of Rails, <code>delete_all</code> and <code>destroy_all</code> could be passed a string of raw SQL.</p>

<p>In Rails 6, these two methods no longer accept any arguments.</p>

<p>Instead, you can use&#8230;</p>

<h2><code>delete_by</code>, <code>destroy_by</code></h2>

<p>New in Rails 6, <a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/Relation.html#method-i-delete_by"><code>delete_by</code></a> and <a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/Relation.html#method-i-destroy_by"><code>destroy_by</code></a> accept the same type of arguments as <code>where</code>: a Hash, an Array, or a raw SQL String.</p>

<p>This means they are vulnerable to the same kind of SQL injection.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;1) OR 1=1--&quot;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">delete_by</span><span class="p">(</span><span class="s2">&quot;id = </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resulting query that deletes all users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="ss">&quot;users&quot;</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">OR</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="c1">--)</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>order</code>, <code>reorder</code></h2>

<p>Prior to Rails 6, it was possible to pass arbitrary SQL to the <a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/QueryMethods.html#method-i-order"><code>order</code></a> and <a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/QueryMethods.html#method-i-reorder"><code>reorder</code></a> methods.</p>

<p>Since Rails did not offer an easy way of setting sort direction, this kind of code was common:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;name </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:direction</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Rails 6.0, injection attempts would raise a deprecation warning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DEPRECATION</span> <span class="ss">WARNING</span><span class="p">:</span> <span class="no">Dangerous</span> <span class="n">query</span> <span class="nb">method</span> <span class="p">(</span><span class="nb">method</span> <span class="n">whose</span> <span class="n">arguments</span> <span class="n">are</span> <span class="n">used</span> <span class="n">as</span> <span class="n">raw</span> <span class="no">SQL</span><span class="p">)</span> <span class="n">called</span> <span class="n">with</span> <span class="n">non</span><span class="o">-</span><span class="n">attribute</span> <span class="n">argument</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="s2">&quot;--&quot;</span><span class="o">.</span> <span class="no">Non</span><span class="o">-</span><span class="n">attribute</span> <span class="n">arguments</span> <span class="n">will</span> <span class="n">be</span> <span class="n">disallowed</span> <span class="k">in</span> <span class="no">Rails</span> <span class="mi">6</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span> <span class="no">This</span> <span class="nb">method</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">called</span> <span class="n">with</span> <span class="n">user</span><span class="o">-</span><span class="n">provided</span> <span class="n">values</span><span class="p">,</span> <span class="n">such</span> <span class="n">as</span> <span class="n">request</span> <span class="n">parameters</span> <span class="ow">or</span> <span class="n">model</span> <span class="n">attributes</span><span class="o">.</span> <span class="no">Known</span><span class="o">-</span><span class="n">safe</span> <span class="n">values</span> <span class="n">can</span> <span class="n">be</span> <span class="n">passed</span> <span class="n">by</span> <span class="n">wrapping</span> <span class="n">them</span> <span class="k">in</span> <span class="no">Arel</span><span class="o">.</span><span class="n">sql</span><span class="p">()</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Starting with Rails 6.1, some logic to check the arguments to <code>order</code>. If the arguments do not appear to be column names or sort order, they will be rejected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;name ARGLBARGHL&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>        <span class="mi">1</span><span class="p">:</span> <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">12</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">UnknownAttributeReference</span> <span class="p">(</span><span class="no">Query</span> <span class="nb">method</span> <span class="n">called</span> <span class="n">with</span> <span class="n">non</span><span class="o">-</span><span class="n">attribute</span> <span class="n">argument</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="s2">&quot;name ARGLBARGHL&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is still possible to inject additional columns to extract some information from the table, such as number of columns or names of the columns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:direction</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;, 8&quot;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;name </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:direction</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resulting exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">StatementInvalid</span> <span class="p">(</span><span class="no">SQLite3</span><span class="o">::</span><span class="ss">SQLException</span><span class="p">:</span> <span class="mi">2</span><span class="n">nd</span> <span class="no">ORDER</span> <span class="no">BY</span> <span class="n">term</span> <span class="n">out</span> <span class="n">of</span> <span class="n">range</span> <span class="o">-</span> <span class="n">should</span> <span class="n">be</span> <span class="n">between</span> <span class="mi">1</span> <span class="ow">and</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>pluck</code></h2>

<p><a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/Associations/CollectionProxy.html#method-i-pluck"><code>pluck</code></a> pulls out specified columns from a query, instead of loading whole records.</p>

<p>In previous versions of Rails, <code>pluck</code> (somewhat surprisingly!) accepted arbitrary SQL strings if they were passed in as an array.</p>

<p>Like <code>order</code>/<code>reorder</code>, Rails 6.0 started warning about this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;1&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="no">DEPRECATION</span> <span class="ss">WARNING</span><span class="p">:</span> <span class="no">Dangerous</span> <span class="n">query</span> <span class="nb">method</span> <span class="p">(</span><span class="nb">method</span> <span class="n">whose</span> <span class="n">arguments</span> <span class="n">are</span> <span class="n">used</span> <span class="n">as</span> <span class="n">raw</span> <span class="no">SQL</span><span class="p">)</span> <span class="n">called</span> <span class="n">with</span> <span class="n">non</span><span class="o">-</span><span class="n">attribute</span> <span class="n">argument</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="o">[</span><span class="s2">&quot;1&quot;</span><span class="o">].</span> <span class="no">Non</span><span class="o">-</span><span class="n">attribute</span> <span class="n">arguments</span> <span class="n">will</span> <span class="n">be</span> <span class="n">disallowed</span> <span class="k">in</span> <span class="no">Rails</span> <span class="mi">6</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span> <span class="no">This</span> <span class="nb">method</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">called</span> <span class="n">with</span> <span class="n">user</span><span class="o">-</span><span class="n">provided</span> <span class="n">values</span><span class="p">,</span> <span class="n">such</span> <span class="n">as</span> <span class="n">request</span> <span class="n">parameters</span> <span class="ow">or</span> <span class="n">model</span> <span class="n">attributes</span><span class="o">.</span> <span class="no">Known</span><span class="o">-</span><span class="n">safe</span> <span class="n">values</span> <span class="n">can</span> <span class="n">be</span> <span class="n">passed</span> <span class="n">by</span> <span class="n">wrapping</span> <span class="n">them</span> <span class="k">in</span> <span class="no">Arel</span><span class="o">.</span><span class="n">sql</span><span class="p">()</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Rails 6.1, <code>pluck</code> now only accepts attribute names!</p>

<h2><code>reselect</code></h2>

<p>Rails 6 introduced <a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/QueryMethods.html#method-i-reselect"><code>reselect</code></a>, which allows one to completely replace the <code>SELECT</code> clause of a query. Like <code>select</code>, it accepts any SQL string. Since <code>SELECT</code> is at the very beginning of the SQL query, it makes it a great target for SQL injection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:column</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;* FROM orders -- &quot;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">reselect</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:column</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note this selects <em>all</em> columns <em>from a different table</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">orders</span> <span class="c1">-- FROM &quot;users&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>rewhere</code></h2>

<p><a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/QueryMethods.html#method-i-rewhere"><code>rewhere</code></a> is analogous to <code>reselect</code> but it replaces the <code>WHERE</code> clause.</p>

<p>Like <code>where</code>, it is very easy to open up <code>rewhere</code> to SQL injection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:age</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;1=1) OR 1=1--&quot;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">rewhere</span><span class="p">(</span><span class="s2">&quot;age &gt; </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:age</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resulting query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SELECT</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">AND</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="no">OR</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="o">--</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up</h2>

<p>Any other new methods that allow SQL injection? Let me know!</p>

<p>Want to find out more?</p>

<ul>
<li><a href="https://rails-sqli.org">rails-sqli.org</a> for the complete list.</li>
<li><a href="https://brakemanscanner.org/">Brakeman</a> to help find vulnerable queries in your code.</li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html">OWASP SQL Injection Cheat Sheet</a> to learn more about preventing SQL injection.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Reason to Avoid constantize in Rails]]></title>
    <link href="https://blog.presidentbeef.com/blog/2020/09/14/another-reason-to-avoid-constantize-in-rails/"/>
    <updated>2020-09-14T08:37:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2020/09/14/another-reason-to-avoid-constantize-in-rails</id>
    <content type="html"><![CDATA[<h2>Backstory</h2>

<p>Recently, a friend asked me if <em>just</em> calling <code>constantize</code> on user input was dangerous, even if subsequent code did not use the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:class</span><span class="o">].</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://brakemanscanner.org/">Brakeman</a> generates a &#8220;remote code execution&#8221; warning for this code:</p>

<pre>
<font color="#00C300">Confidence</font>: <font color="#AA0000">High</font>
<font color="#00C300">Category</font>: Remote Code Execution
<font color="#00C300">Check</font>: UnsafeReflection
<font color="#00C300">Message</font>: Unsafe reflection method `constantize` called with parameter value
<font color="#00C300">Code</font>: <font color="#6C009B">params[:class].classify</font>.constantize
<font color="#00C300">File</font>: app/controllers/users_controller.rb
<font color="#00C300">Line</font>: 7
</pre>


<p>But why? Surely just converting a string to a constant (if the constant even exists!) can&#8217;t be dangerous, right?</p>

<p>Coincidentally, around that same time I was looking at Ruby deserialization gadgets - in particular <a href="https://www.elttam.com/blog/ruby-deserialization/">this one</a> which mentions that Ruby&#8217;s <code>Digest</code> module will load a file based on the module name. For example, <code>Digest::A</code> will try to <code>require 'digest/a'</code>:</p>

<pre>2.7.0 :001 &gt; require <font color="#FF5555"><b>&apos;</b></font><font color="#AA0000">digest</font><font color="#FF5555"><b>&apos;</b></font>
 =&gt; <font color="#55FFFF"><b>true</b></font> 
2.7.0 :002 &gt; <font color="#5555FF"><u style="text-decoration-style:single"><b>Digest</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>Whatever</b></u></font>
<font color="#DEDEDE"><b>Traceback</b></font> (most recent call last):
        5: from /home/justin/.rvm/rubies/ruby-2.7.0/bin/irb:23:in `&lt;main&gt;&apos;
        4: from /home/justin/.rvm/rubies/ruby-2.7.0/bin/irb:23:in `load&apos;
        3: from /home/justin/.rvm/rubies/ruby-2.7.0/lib/ruby/gems/2.7.0/gems/irb-1.2.1/exe/irb:11:in `&lt;top (required)&gt;&apos;
        2: from (irb):2
        1: from /home/justin/.rvm/rubies/ruby-2.7.0/lib/ruby/2.7.0/digest.rb:16:in `const_missing&apos;
<font><b>LoadError (</b><u style="text-decoration-style:single"><b>library not found for class Digest::Whatever -- digest/whatever</b></u><b>)</b></font></pre>


<p>The <code>Digest</code> library uses the <a href="https://rdoc.info/stdlib/core/Module:const_missing"><code>const_missing</code></a> hook to implement this functionality.</p>

<p>This made me wonder if <code>constantize</code> and <code>const_missing</code> could be connected, and what the consequences would be.</p>

<h2>Constantizing in Rails</h2>

<p>The <code>constantize</code> method in Rails <a href="https://api.rubyonrails.org/classes/String.html#method-i-constantize">turns a string into a constant</a>. If the constant does not exist then a <code>NameError</code> will be raised.</p>

<p>However, it is possible to hook into the constant lookup process in Ruby by defining a <code>const_missing</code> method. If a constant cannot be found in a given module, and that module has <code>const_missing</code> defined, then <code>const_missing</code> will be invoked.</p>

<pre>2.7.0 :001 &gt; <font color="#00C300">module</font> <font color="#5555FF"><u style="text-decoration-style:single"><b>X</b></u></font>
2.7.0 :002 &gt;   <font color="#00C300">def</font> <font color="#55FFFF"><b>self</b></font>.<font color="#5555FF"><b>const_missing</b></font>(name)
2.7.0 :003 &gt;     puts <font color="#FF5555"><b>&quot;</b></font><font color="#AA0000">You tried to load #{</font>name.inspect<font color="#AA0000">}</font><font color="#FF5555"><b>&quot;</b></font>
2.7.0 :004 &gt;   <font color="#00C300">end</font>
2.7.0 :005 &gt; <font color="#00C300">end</font>
 =&gt; <font color="#6C009B">:const_missing</font> 
2.7.0 :006 &gt; <font color="#5555FF"><u style="text-decoration-style:single"><b>X</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>Hello</b></u></font>
You tried to load :Hello
 =&gt; <font color="#55FFFF"><b>nil</b></font></pre>


<p>If <code>const_missing</code> is implemented with behavior based on the constant name, such as loading a file or creating a new object, there is an opportunity for malicious behavior.</p>

<h2>Some Vulnerable Gems</h2>

<p>Fortunately, <code>const_missing</code> is not used very often. When it is, the implementation is not usually exploitable.</p>

<p>Searching across ~1300 gems, I found only ~40 gems with a <code>const_missing</code> implementation.</p>

<p>Of those, the majority were not exploitable because they checked the constant name against expected values or called <code>const_get</code> which raises an exception if the constant does not exist.</p>

<p>One gem, <a href="https://github.com/rubychan/coderay">coderay</a>, <a href="https://github.com/rubychan/coderay/blob/d38502167541a1cd1b505a0e468e0098e3ae7538/lib/coderay/helpers/plugin_host.rb#L59-L67">loads files based on constant names</a> like the Digest library. Also like the Digest library, this does not appear to be exploitable because the files are limited to a single coderay directory.</p>

<p>The next two gems below have memory leaks, which can enable denial of service attacks through memory exhaustion.</p>

<h3>Temple</h3>

<p>The <a href="https://github.com/judofyr/temple">Temple</a> gem is a foundational gem used by Haml, Slim, and other templating libraries.</p>

<p>In Temple, there is a module called <code>Temple::Mixins::GrammarDSL</code> that implements <code>const_missing</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">const_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">const_set</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="no">Root</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nb">name</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method creates a new constant based on the given <code>name</code> and assigns a new object.</p>

<p>This is a memory leak since constants are never garbage collected. If an attacker can trigger it, they can create an unlimited number of permanent objects, using up as much memory as possible.</p>

<p>Unfortunately, it is easy to exploit this code.</p>

<p><code>Temple::Grammar</code> extends <code>Template::Mixins::GrammarDSL</code> and is a core class for Temple. Let&#8217;s see if it is loaded by Haml, a popular templating library often used with Rails:</p>

<pre>2.7.0 :001 &gt; require <font color="#FF5555"><b>&apos;</b></font><font color="#AA0000">haml</font><font color="#FF5555"><b>&apos;</b></font>
 =&gt; <font color="#55FFFF"><b>true</b></font> 
2.7.0 :002 &gt; <font color="#5555FF"><u style="text-decoration-style:single"><b>Temple</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>Grammar</b></u></font>
 =&gt; <font color="#5555FF"><u style="text-decoration-style:single"><b>Temple</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>Grammar</b></u></font> </pre>


<p>Great! What happens if we try to reference a module that definitely does not exist?</p>

<pre>2.7.0 :003 &gt; <font color="#5555FF"><u style="text-decoration-style:single"><b>Temple</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>Grammar</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>DefinitelyDoesNotExist</b></u></font>
 =&gt; #&lt;Temple::Mixins::GrammarDSL::Root:0x000055a79b011060 @grammar=Temple::Grammar, @children=[], @name=:DefinitelyDoesNotExist&gt; </pre>


<p>As can be seen above, the constant is created along with a new object.</p>

<p>To go one step further&#8230; does the use of constantize invoke this code?</p>

<p>We can test by loading a Rails console for an application using Haml:</p>

<pre>Loading development environment (Rails 6.0.3.2)
2.7.0 :001 &gt; require <font color="#FF5555"><b>&apos;</b></font><font color="#AA0000">haml</font><font color="#FF5555"><b>&apos;</b></font>
 =&gt; <font color="#55FFFF"><b>false</b></font> 
2.7.0 :002 &gt; <font color="#FF5555"><b>&apos;</b></font><font color="#AA0000">Temple::Grammar::DefinitelyDoesNotExist</font><font color="#FF5555"><b>&apos;</b></font>.constantize
 =&gt; #&lt;Temple::Mixins::GrammarDSL::Root:0x000055ba28031a50 @grammar=Temple::Grammar, @children=[], @name=:DefinitelyDoesNotExist&gt; 
</pre>


<p>It does!</p>

<p>Any Ruby on Rails application using Haml or Slim that calls <code>constantize</code> on user input (e.g. <code>params[:class].classify.constantize</code>) is vulnerable to a memory leak via this method.</p>

<h3>Restforce</h3>

<p>A very similar code pattern is implemented in the <a href="https://github.com/restforce/restforce">restforce</a> gem.</p>

<p>The <a href="https://github.com/restforce/restforce/blob/b14175a9072fb6333c1c1b3dce2bb498c022a1b3/lib/restforce.rb#L65-L67">ErrorCode module</a> uses <code>const_missing</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ErrorCode</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">const_missing</span><span class="p">(</span><span class="n">constant_name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">const_set</span> <span class="n">constant_name</span><span class="p">,</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ResponseError</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nearly the same, except this actually creates new <em>classes</em>, not just regular objects.</p>

<p>We can verify again:</p>

<pre>Loading development environment (Rails 6.0.3.2)
2.7.0 :001 &gt; require <font color="#FF5555"><b>&apos;</b></font><font color="#AA0000">restforce</font><font color="#FF5555"><b>&apos;</b></font>
 =&gt; <font color="#55FFFF"><b>false</b></font> 
2.7.0 :002 &gt; <font color="#5555FF"><u style="text-decoration-style:single"><b>Restforce</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>ErrorCode</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>WhateverWeWant</b></u></font>
 =&gt; <font color="#5555FF"><u style="text-decoration-style:single"><b>Restforce</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>ErrorCode</b></u></font>::<font color="#5555FF"><u style="text-decoration-style:single"><b>WhateverWeWant</b></u></font> 
</pre>


<p>This time we get as many new classes as we want.</p>

<p><strong>This has been fixed in <a href="https://github.com/restforce/restforce/blob/master/CHANGELOG.md#500-jul-10-2020">Restforce 5.0.0</a>.</strong></p>

<h2>Finding and Exploiting Memory Leaks</h2>

<p><em>Finding</em> vulnerable code like this in a production application would be difficult. You would need to guess which parameters might be <code>constantize</code>d.</p>

<p>Verifying that you&#8217;ve found a memory leak is a little tricky and the two memory leaks described above create very minimal objects.</p>

<p>From what I could estimate, a new <code>Rule</code> object in Temple uses about 300 bytes of memory, while a new class in Restforce was taking up almost 1,000 bytes.</p>

<p>Based on that and my testing, it would take 1 to 4 million requests to use just 1GB of memory.</p>

<p>Given that web applications are usually restarted on a regular basis and it&#8217;s not usually a big deal to kill off a process and start a new one, this does not seem particularly impactful.</p>

<p>However, it would be annoying and possibly harmful for smaller sites. For example, the base Heroku instance only has 512MB of memory.</p>

<p>Another note here: Memory leaks are not the worst outcome of an unprotected call to <code>constantize</code>. More likely it can trigger remote code execution. The real issue I am trying to explore here is the unexpected behavior that may be hidden in dependencies.</p>

<h2>Conclusions</h2>

<p>In short: Avoid using <code>constantize</code> in Rails applications. If you need to use it, check against an allowed set of class names <em>before</em> calling <code>constantize</code>. (Calling <code>classify</code> before checking is okay, though.)</p>

<p>Likewise for <code>const_missing</code> in Ruby libraries. Doing anything dynamic with the constant name (loading files, creating new objects, evaluating code, etc.) should be avoided. Ideally, check against an expected list of names and reject anything else.</p>

<p>In the end, this comes down to the security basics of not trusting user input and strictly validating inputs.</p>

<p><em>Edit:</em> It seems some language I used above was a little ambiguous, so I tweaked it. Calling <code>classify</code> does not make the code safe - I meant calling <code>classify</code> is not dangerous by itself. It&#8217;s the subsequent call to <code>constantize</code> that is dangerous. So you can safely call <code>classify</code>, check against a list of allowed classes, then take the appropriate action.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why 'Escaping' JavaScript is Dangerous]]></title>
    <link href="https://blog.presidentbeef.com/blog/2020/05/12/why-escape-javascript-is-dangerous/"/>
    <updated>2020-05-12T11:40:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2020/05/12/why-escape-javascript-is-dangerous</id>
    <content type="html"><![CDATA[<p>A recent <a href="https://github.com/rails/rails/security/advisories/GHSA-65cv-r6x7-79hv">vulnerability report</a> and <a href="https://chefsecure.com/blog/i-found-xss-security-flaws-in-rails-heres-what-happened">the blog post behind it</a> brought my attention back to the <a href="https://api.rubyonrails.org/v6.0.0/classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript"><code>escape_javascript</code></a> Ruby on Rails helper method.</p>

<blockquote class="twitter-tweet" data-dnt="true"><p lang="en" dir="ltr">Let me say it again&#8230; if you are calling `escape_javascript` or `j` in your Rails code, please don&#39;t! <a href="https://t.co/60KLEjHX3T">https://t.co/60KLEjHX3T</a></p>&mdash; Justin Collins (@presidentbeef) <a href="https://twitter.com/presidentbeef/status/1258917835977318400?ref_src=twsrc%5Etfw">May 9, 2020</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>It&#8217;s bad form to drop blanket statements without explanation or evidence, so here it is:</p>

<h3>Escaping HTML</h3>

<p>Part of the danger of <code>escape_javascript</code> is the <strong>name</strong> and apparent relationship to <a href="https://api.rubyonrails.org/v6.0.0/classes/ERB/Util.html#method-c-html_escape"><code>html_escape</code></a>.</p>

<p>HTML is a markup language for writing documents. Therefore, it must have a method for representing itself in text.
In other words, there must be a way to encode <code>&lt;b&gt;</code> such that the browser <em>displays</em> <code>&lt;b&gt;</code> and does not interpret it as HTML.</p>

<p>As a result, HTML has a well-defined HTML encoding strategy.
In the context of security and <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">cross-site scripting</a>, if a value output in an HTML context is <em>HTML escaped</em>, it is safe - the value will not be interpreted as HTML.</p>

<p><em>(<a href="https://blog.presidentbeef.com/blog/2020/01/14/injection-prevention-sanitizing-vs-escaping/">See my post all about escaping!</a>)</em></p>

<h3>Escaping Javascript</h3>

<p>On the other hand, JavaScript has no such escaping requirements or capabilities.</p>

<p>Therefore, the &#8220;escaping&#8221; performed by <code>escape_javascript</code> is limited.
The <a href="https://github.com/rails/rails/security/advisories/GHSA-65cv-r6x7-79hv">vulnerability report</a> states the method is for &#8220;escaping JavaScript string literals&#8221;.</p>

<p>In particular, <code>escape_javascript</code> is only useful in one, single context: inside JavaScript strings!</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x"># ERb Template</span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  var x = &#39;</span><span class="cp">&lt;%=</span> <span class="n">escape_javascript</span> <span class="n">some_value</span> <span class="cp">%&gt;</span><span class="x">&#39;;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Use of <code>escape_javascript</code> in any other context is incorrect and dangerous!</strong></p>

<p>This is and always has been dangerous (note the missing quotes):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x"># ERb Template</span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  var x = </span><span class="cp">&lt;%=</span> <span class="n">escape_javascript</span> <span class="n">some_value</span> <span class="cp">%&gt;</span><span class="x">;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>some_value</code> could be a payload like <code>1; do_something_shady(); //</code> which would result in the following HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">do_something_shady</span><span class="p">();</span> <span class="c1">//; </span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>escape_javascript</code> helper <strong>does not</strong> and <strong>cannot</strong> make arbitrary values inserted into JavaScript &#8220;safe&#8221; in the same way <code>html_escape</code> makes values safe for HTML.</p>

<h3>CVE-2020-5267</h3>

<p><a href="https://chefsecure.com/blog/i-found-xss-security-flaws-in-rails-heres-what-happened">Jesse&#8217;s post</a> has more details, but here&#8217;s the gist: JavaScript added a new string literal. Instead of just single and double-quotes, now there are also backticks <code>`</code> which support string interpolation (like Ruby!).</p>

<p>This meant it was simple to bypass <code>escape_javascript</code> and execute arbitrary JavaScript by using a backtick to break out of the string or just <code>#{...}</code> to execute code during interpolation.</p>

<p>For example, if this were our code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x"># ERb Template</span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">  var x = `</span><span class="cp">&lt;%=</span> <span class="n">escape_javascript</span> <span class="n">some_value</span> <span class="cp">%&gt;</span><span class="x">`;</span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then if <code>some_value</code> had a payload of <code>`; do_something_shady(); //</code>, the resulting HTML would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="err">``</span><span class="p">;</span> <span class="nx">do_something_shady</span><span class="p">();</span> <span class="c1">//`</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because <code>escape_javascript</code> was not aware of backticks for strings.</p>

<h3>Dangers of Dynamic Code Generation</h3>

<blockquote class="twitter-tweet" data-dnt="true"><p lang="en" dir="ltr">Let me say it again… using dynamic javascript under practically any circumstance is inviting trouble. It might be ok. I’d rather not have to worry about it. <a href="https://t.co/wnPy3OnkKI">https://t.co/wnPy3OnkKI</a></p>&mdash; Shake, Oreo (@ndm) <a href="https://twitter.com/ndm/status/1258982525172510720?ref_src=twsrc%5Etfw">May 9, 2020</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>As I have <a href="https://youtu.be/g_24036NDhM">talked about before</a>, web applications are essentially poorly-defined compilers generating code with untrusted inputs.
In the end, the server is just returning a mishmash of code for the browser to interpret.</p>

<p>However, directly trying to generate safe code in a Turing-complete language like JavaScript or Ruby via string manipulation is a risky game.
Methods like <code>escape_javascript</code> make it tempting to do so because the name sounds like it will make the code safe.</p>

<p>If at all possible, avoid dynamic code generation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sanitizing, Escaping, and Encoding]]></title>
    <link href="https://blog.presidentbeef.com/blog/2020/01/14/injection-prevention-sanitizing-vs-escaping/"/>
    <updated>2020-01-14T14:24:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2020/01/14/injection-prevention-sanitizing-vs-escaping</id>
    <content type="html"><![CDATA[<p><em>&#8220;We need to sanitize this data&#8221;</em> is a phrase I have heard too many times in the context of web security.
It always makes me a little nervous.</p>

<p>The implication of the term &#8220;sanitize&#8221; is somehow cleaning the data or rendering it &#8220;safe&#8221;.
But the details of how that safety is achieved are a little vague.</p>

<p>Often it means simply searching for a function containing <code>sanitize</code> and blindly using that function.</p>

<p>That is usually the wrong thing!</p>

<h3>Injection Vulnerabilities</h3>

<p>Injection vulnerabilities, including <a href="https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">cross-site scripting</a>, are a <a href="https://www.owasp.org/index.php/Top_10-2017_Top_10">top category of web vulnerabilities</a>.</p>

<p>The root cause of injection vulnerabilities is the mixing of code and data which is then handed to a parser (the browser, database driver, shell, etc).
Injection is possible when the data is treated as code.</p>

<p>(<a href="https://youtu.be/g_24036NDhM">See my talk about injection for a deeper dive!</a>)</p>

<p>Since proper escaping or sanitization is the mitigation for injection vulnerabilities, it is important to have a clear understanding of what those terms mean.</p>

<h3>Escaping</h3>

<p>The term &#8220;escaping&#8221; originates from situations where text is being interpreted in some mode
and we want to &#8220;escape&#8221; from that mode into a different mode.</p>

<p>For example, there are <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI &#8220;escape codes&#8221;</a>
to tell your terminal to switch from a text mode to interpreting a sequence of control characters.</p>

<p>The more common situation is when a developer needs to tell a parser to <em>not</em> interpret a value as code.
For example, when one is writing a string and wants to include a double-quote inside the string:</p>

<pre><code>"blah\"blah"
</code></pre>

<p>The backslash <code>\</code> is an escape character that tells the parser to treat the following character as just a value,
not the end of the string literal.</p>

<p>However, especially in web security, when we say &#8220;escaping&#8221; we typically mean &#8220;encoding&#8221;:</p>

<h3>Encoding</h3>

<p><strong>Encoding</strong> involves replacing special characters with a different representation.</p>

<p>HTML encoding uses <a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity">HTML entities</a>.</p>

<p>For example, <code>&lt;</code> would normally be interpreted as the start of an HTML tag.
To display a <code>&lt;</code> character without it being interpreted as a tag, use <code>&amp;lt;</code>.</p>

<p>In HTML, <code>&amp;</code> is the escape character. So now you can see how encoding and escaping are intertwined.</p>

<p>In URLs, encoding involves replacing characters with <code>%</code> followed by a hexadecimal number that corresponds
to the ASCII code for that character.</p>

<p>For example, <code>/</code> in a URL would normally be interpreted as a path separator.
To pass in <code>/</code> without it being interpreted that way, use <code>%2F</code>.</p>

<p>This is called &#8220;URL encoding&#8221; or &#8221;<a href="https://en.wikipedia.org/wiki/Percent-encoding">percent encoding</a>&#8221; and the <code>%</code> character is the escape character.
The value after <code>%</code> is the hex representation of the ASCII code for the desired display character.</p>

<p>Encoding special characters is typically a very simple and straightforward process.
Characters are simply replaced with their encoded value in a linear fashion.</p>

<p>The encoding scheme used depends on context.
For any type of interpretation (HTML, JavaScript, URLs, CSS, SQL, JSON, &#8230;) there will be a different
encoding scheme. It is important to use the correct encoding for the context.</p>

<p><strong>Also note that encoding is a completely reversible process!</strong>
Given an encoded string, we can easily decode it back to the original value.</p>

<h3>Sanitizing</h3>

<p>Unlike encoding and escaping, <strong>sanitization</strong> involves <em>removing</em> characters entirely in order to make the value &#8220;safe&#8221;.</p>

<p>This is a complicated, error-prone process.</p>

<p>Here is a classic example of bad sanitization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Remove script tags!</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sanitize_js</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>  <span class="n">input</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&lt;\/?script&gt;/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sanitize_js</span><span class="p">(</span><span class="s2">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;alert(1)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">sanitize_js</span><span class="p">(</span><span class="s2">&quot;&lt;scri&lt;script&gt;pt&gt;alert(1)&lt;/scr&lt;/script&gt;ipt&gt;&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not just an amusing theoretical example - I have seen this exact approach used in production applications.</p>

<p>Since sanitization is so difficult - nearly impossible - to do correctly, most sanitization implementations have seen
<a href="https://www.google.com/search?q=html+sanitize+bypass">a number of bypasses</a>.</p>

<p>Also, unlike encoding, sanitization is not reversible!
Information is lost when the data is sanitized.
You cannot retrieve the original input once it has gone through a sanitization process.
This is rarely a desirable side-effect.</p>

<p><em>Sanitization can also mean removal or replacement of sensitive data.
That is a different usage not being discussed here.</em></p>

<h3>Using the Right Approach</h3>

<p>From a security perspective, contextually encoding untrusted values <em>at time of use</em> is the preferred approach.</p>

<p>The tricky part is understanding the output context of the data and which encoding to use.
HTML can easily have more than four different contexts in a single document!
Also, it makes no sense to use HTML encoding in SQL.</p>

<p>When possible, use encoding routines provided by libraries or frameworks.</p>

<p>Sanitization should be reserved for cases when encoding is simply not possible.
For example, if an application must accept and display HTML from users.
There is no way to use encoding in that scenario.</p>

<p>Again, when possible, do not write your own sanitization! Use existing libraries.</p>

<h3>Summary</h3>

<p>When discussing handling potentially dangerous data, be precise with terms!</p>

<p>The security industry seems to have settled on &#8220;escaping&#8221; to actually mean &#8220;encoding&#8221;.
In other words, a reversible transformation that encodes special characters so
they will not be interpreted as code.</p>

<p>Sanitization, in this context, means an irreversible stripping of special characters.</p>

<p>When possible, prefer encoding/escaping to sanitization!</p>

<h3>See Also</h3>

<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet">OWASP Cross-Site Scripting Prevention Cheatsheet</a></p>

<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html">OWASP Injection Prevention Cheatsheet</a></p>

<p><a href="https://youtu.be/g_24036NDhM">Taking on the King: Killing Injection Vulnerabilities</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reviving an HP 660LX in 2019]]></title>
    <link href="https://blog.presidentbeef.com/blog/2019/08/04/reviving-an-hp660lx-in-2019/"/>
    <updated>2019-08-04T09:52:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2019/08/04/reviving-an-hp660lx-in-2019</id>
    <content type="html"><![CDATA[<p>It started off as a joke&#8230;</p>

<blockquote class="twitter-tweet" data-dnt="true" data-link-color="#E81C4F"><p lang="en" dir="ltr">Just setting up my burner machine for <a href="https://twitter.com/defcon?ref_src=twsrc%5Etfw">@defcon</a> <a href="https://t.co/Dz9pjCBTCo">pic.twitter.com/Dz9pjCBTCo</a></p>&mdash; Justin Collins (@presidentbeef) <a href="https://twitter.com/presidentbeef/status/1144761345847336960?ref_src=twsrc%5Etfw">June 29, 2019</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>I had spent some time <em>several years ago</em> trying to get Linux running on this machine via the (defunct) JLime project,
so I had some of the pieces available to actually get this little &#8220;pocket computer&#8221; going again - mainly
compatible CompactFlash cards and an external card reader.
But I was mostly joking.</p>

<p>Then I starting thinking how funny it would be to actually sit in a talk and take notes at <a href="https://defcon.org/">DEF CON</a> on an ancient &#8220;laptop&#8221;&#8230;</p>

<h3>Battery Power</h3>

<p>The reason I was mostly joking is because the batteries in the 660LX were not working at all.
So, what was I going to do? Plug it into the wall? That&#8217;s just sad, not funny.</p>

<p>I started looking around online for replacement batteries for this machine from 1998.
Despite visiting several rather shady websites, for some reason I was unable to find anyone selling twenty-year-old
laptop batteries.
Some sites claimed to offer a replacement, but from the pictures it was clear they would not work.
The only real possibilities I found were complete sets - a 660LX, manual, cables, etc.
I already had a 660LX, acquired for free, so I really didn&#8217;t want to spend $100+ on another one!
Also, kind of ruins the joke to do so.</p>

<p><em>(Side note: the 660LX has a button battery for backup power. Searching for &#8220;HP 660LX battery&#8221; will return sites trying to sell
you a little CR2032 battery.)</em></p>

<p>Now, I will admit my mental model of a laptop battery was a block of chemical goop inside of some plastic wrap with some wires coming out of it.
After ungracefully disassembling the 660LX battery, I found inside it was just two smaller batteries?!</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_battery_open.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_battery_open.jpg" alt="Open battery pack of HP 660LX" /></a></p>

<p>The batteries said &#8220;US18650S SONY ENERGYTEC&#8221; on them.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/hp_660lx_old_batteries.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/hp_660lx_old_batteries.jpg" alt="Sony 18650S Batteries" /></a></p>

<p>While I didn&#8217;t find those exact batteries, some investigation showed the 18650 battery in general is extremely common.</p>

<p>There are two kinds of 18650 - one with &#8220;caps&#8221; (that little nub on the top) and one without.
It seems the ones with caps are safer, as they have an internal circuit to keep them from blowing up.
However, as you can see above, I needed the kind without caps. Presumably the little circuit board
regulates charging the batteries.</p>

<p>The Internet suggested sticking to &#8220;brand name&#8221; batteries, but weirdly Amazon does not carry any of those.
I took a chance on a pack of batteries which reviewers suggested looked like &#8220;genuine&#8221; Samsung batteries.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/samsung_18650-30Q_batteries.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/samsung_18650-30Q_batteries.jpg" alt="Samsung 18650 batteries" /></a></p>

<p>I carefully ripped the old batteries out. The leads from the batteries to the little circuit board were
actually soldered to the batteries, so I pried them off with a screwdriver. Probably not a great idea
unless they are really, truly dead.</p>

<p>With some effort, I shoved the new batteries back in the case and sandwiched the wires back in as well.
I didn&#8217;t bother actually attaching/gluing/soldering anything.</p>

<p>I did, however, scare myself when I generated a terrifying electric arc as I
tried to use a screwdriver to squeeze everything back into the battery case.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_batteries_replaced.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_batteries_replaced.jpg" alt="HP 660LX batteries replaced" /></a></p>

<p>I may have damaged the case just a tiny bit when I gently pried it open,
contributing to it looking slightly sketchy when I tried to close it back up.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_battery_together.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_battery_together.jpg" alt="HP 660LX battery put back together" /></a></p>

<p>But, who cares how it looks&#8230;does it work??</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_running_on_new_batteries.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_running_on_new_batteries.jpg" alt="HP 660LX running on battery power" /></a></p>

<p><strong>YES!</strong></p>

<p>Hahahaha now I can walk around using my relic with no wires!</p>

<h3>Software Updates</h3>

<p>Nowadays, a device that can&#8217;t connect to anything does not seem like much fun.</p>

<p>Of course I wanted to hook this Windows CE 2.0 machine up to the Internet!</p>

<p>The HP 660LX has a &#8220;PC CARD&#8221; expansion slot where you can slap in an Ethernet or wireless card,
but of course it is ancient and you have to be careful about compatibility.</p>

<p>Enter <a href="https://www.hpcfactor.com/">HPC: Factor</a>! This is a website/forum full of useful information.
For £10 you can get access to a ton of file downloads (software, drivers, updates) for a year.
Totally worth it.</p>

<p>One thing I learned quickly is that you need the service pack for Windows CE 2.0 and the Network Service Pack
in order to have a chance at getting a wireless card to work.</p>

<p>At this point, I had been transferring files to the 660LX via a compact flash card (which, at 8GB, probably blew the little machine&#8217;s <em>mind</em>).
However, most software for Windows CE requires installation via ActiveSync.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/kingston_cf_8gb_card.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/kingston_cf_8gb_card.jpg" alt="Kingston CompactFlash card" /></a></p>

<p>What is ActiveSync? Well, originally these &#8220;pocket computers&#8221; weren&#8217;t meant to be tiny laptops.
They were more like little helpers you use while you are away from your main machine, then you sync up
files, calendars, email, etc. when you went back to your desk.</p>

<p>ActiveSync was the software used to sync between a pocket computer and your main machine.</p>

<p>Now, for Windows CE 2.0, the recommended version of ActiveSync is 3.8. The very <em>newest</em> operating system
supported by ActiveSync 3.8 is Windows XP.</p>

<p>By pure luck, I had an old Windows XP laptop and I was able to install ActiveSync!</p>

<p><strong>BUT</strong>&#8230; you need a special serial cable to hook up the 660LX.
At first I poked around eBay, but no luck. Yet, in the back of my mind,
I was <em>pretty</em> sure I still had that cable somewhere. I searched all around my office and
dug through my big box of (mostly useless) cables,
but still no luck.</p>

<p>Just when I gave up (of course) I found it!! Yay!!</p>

<p><strong>BUT</strong>&#8230; turns out I don&#8217;t have a serial port on my Windows XP laptop.</p>

<p>I thought about trying a Windows XP virtual machine on my main Linux box, but it doesn&#8217;t have a serial port, either!
None of my machines had an infrared port, either.</p>

<p>After first buying the wrong cable on Amazon, I got an RS-232 to USB adapter and a tiny, tiny CD with drivers.
Luckily, the laptop has a CD drive, so I was able to actually install the proper drivers.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/usb_to_serial_cable.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/usb_to_serial_cable.jpg" alt="USB to serial cable" /></a></p>

<p>After an uncomfortable amount of configuration twiddling&#8230; they connected!!</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/active_sync_connected.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/active_sync_connected.jpg" alt="ActiveSync is connected" /></a></p>

<p>I was then able to install Windows CE 2.0 SP1 and the CE Network Service Pack.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/install_ce_sp1.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/install_ce_sp1.jpg" alt="Installing Windows CE SP1" /></a></p>

<h3>Networking</h3>

<p>One of my criteria for this project was to <em>not spend much money on a joke</em>.</p>

<p>After spending some time looking around, I bought a $20 wireless adapter off of eBay.
$20 was really right at the limit of my per-item budget.</p>

<p>In the meantime, though, I found out there was another way to access the Internet.</p>

<p>Turns out you can &#8220;share&#8221; the networking connection on the main machine with the 660LX
over the serial cable, via ActiveSync.</p>

<p>The only weird bit is that you need to run a proxy server on the main machine to route
the connection to the Internet.</p>

<p>In the modern world, that is not a problem. In the land of Windows XP, however, I was not sure I would be able to get something working.
I found <a href="https://www.youngzsoft.net/ccproxy/windows-proxy-server.htm">CCProxy</a>, which did work, despite its awful and confusing interface.</p>

<p>Configured the proxy for &#8220;The Internet&#8221; on the 660LX and&#8230;</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_accessing_google.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_accessing_google.jpg" alt="Accessing Google via Pocket Explorer" /></a></p>

<p>Wow! The Internet!</p>

<p>Sadly&#8230; or not so sadly&#8230; the world has moved to HTTPS and to stronger protocols than what
lowly Pocket Explorer supports. Thus, most of the web is entirely inaccessible on the device.</p>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_failure_to_access_github.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/hp660lx_failure_to_access_github.jpg" alt="Failure to access sites over HTTPS" /></a></p>

<p>As a result, when the eBay seller canceled my order for the wireless adapter, I figured &#8220;meh&#8221;.
Even if you can get WiFi working (which would likely require connecting to a totally unsecured network),
there&#8217;s not much of the web that one can even visit.</p>

<p>Yes, it would be possible to use an SSL stripper, etc., but I didn&#8217;t want to go through the hassle of setting
that up on Windows XP.</p>

<h3>Wrapping Up</h3>

<p><a href="https://blog.presidentbeef.com/images/blog/hp_660lx/the_whole_setup.jpg"><img src="https://blog.presidentbeef.com/images/blog/hp_660lx/the_whole_setup.jpg" alt="The whole setup" /></a></p>

<p>This turned into more of a narrative than a how-to guide.
Maybe I&#8217;ll do another write-up with the details.
In the meantime, I can try to answer questions about specifics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Ruby Performance Hotspots via Allocation Stats]]></title>
    <link href="https://blog.presidentbeef.com/blog/2018/11/28/finding-ruby-performance-hotspots-via-allocation-stats/"/>
    <updated>2018-11-28T11:45:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2018/11/28/finding-ruby-performance-hotspots-via-allocation-stats</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/seattlerb/ruby_parser/">RubyParser</a> is a library written by <a href="http://www.zenspider.com/">Ryan Davis</a> for parsing Ruby code and producing an abstract syntax tree. It is used by <a href="https://brakemanscanner.org/">Brakeman</a> and several other static analysis gems.</p>

<p>Recently I was poking around to see if there was any low-hanging fruit for performance improvements.
At first, I was interested in the generated parsers. Racc outputs some <em>crazy</em> arrays of state machine changes.
Instead of generating arrays of integers, it outputs arrays of strings, then splits those strings into integers which it loads into the final array.
I thought for sure skipping this and starting with the final array of integers would be faster, but&#8230;somehow it wasn&#8217;t.</p>

<p>I moved on to thinking about <a href="https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3">frozen string literals</a>, which led me to checking String allocations.</p>

<h3>Measuring String Allocations</h3>

<p>I found the <a href="https://github.com/srawlins/allocation_stats">allocation_stats</a> gem very useful for this.</p>

<p>I set up a test like this to read in a file and parse it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ruby_parser&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;allocation_stats&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">rp</span> <span class="o">=</span> <span class="no">RubyParser</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">stats</span> <span class="o">=</span> <span class="no">AllocationStats</span><span class="o">.</span><span class="n">trace</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rp</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">stats</span><span class="o">.</span><span class="n">allocations</span><span class="p">(</span><span class="n">alias_paths</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">class</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="ss">:sourcefile</span><span class="p">,</span> <span class="ss">:sourceline</span><span class="p">)</span><span class="o">.</span><span class="n">sort_by_count</span><span class="o">.</span><span class="n">to_text</span>
</span></code></pre></td></tr></table></div></figure>


<p>This outputs a report like this (truncated here):</p>

<pre><code>                    sourcefile                      sourceline  count
--------------------------------------------------  ----------  -----
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_parser.rb                 20  70686
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_parser_extras.rb        1361  58154
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_parser_extras.rb        1362  54672
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_lexer.rb                 373  19019
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_lexer.rb                 770  12005
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_lexer.rex.rb             109   8252
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_parser_extras.rb        1015   6818
</code></pre>

<p>Right away, these look like some juicy targets.</p>

<h3>Version Creation</h3>

<p>Let&#8217;s take a look at the first one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Parser</span> <span class="o">&lt;</span> <span class="ss">Racc</span><span class="p">:</span><span class="ss">:Parser</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">RubyParserStuff</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inherited</span> <span class="n">x</span>
</span><span class='line'>    <span class="ss">RubyParser</span><span class="p">:</span><span class="ss">:VERSIONS</span> <span class="o">&lt;&lt;</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">version</span>
</span><span class='line'>    <span class="no">Parser</span> <span class="o">&gt;</span> <span class="nb">self</span> <span class="ow">and</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="o">[</span><span class="sr">/(?:V|Ruby)(\d+)/</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On line 8 you can see the <code>Parser.version</code> method. RubyParser is actually not just one parser, but multiple parsers for different versions of Ruby.
So there is a <code>RubyParser</code> class but also <code>Ruby18Parser</code>, <code>Ruby19Parser</code>, etc. <em>and</em> <code>RubyParser::V18</code>, <code>RubyParser::V19</code>, etc.
To figure out the version of the current class, the code above grabs the version from the class name itself.</p>

<p>The problem is this code is called <em>a lot</em> (70k+ in the example above) to make version-specific decisions during the lexing phase.
This is <a href="https://github.com/presidentbeef/ruby_parser/commit/7274aa6df023981fc3c375a9d22bcde781f2cc3f">fairly easy to fix</a>.</p>

<p>In my testing, this <strong>reduced string allocations by ~25% and parse time by 5-10%.</strong>
One thing I have noticed - and you may also find if you go chasing object allocations in Ruby programs - is that reducing allocations doesn&#8217;t necessarily help with peak memory use or run time.
It seems the Ruby VM has gotten pretty good at allocating and garbage collecting objects efficiently.</p>

<h3>Debug Code</h3>

<p>Let&#8217;s take a look at the next two large number of String allocations:</p>

<pre><code>                    sourcefile                      sourceline  count
--------------------------------------------------  ----------  -----
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_parser_extras.rb        1361  58154
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_parser_extras.rb        1362  54672
</code></pre>

<p>Interesting: just two lines apart, with over 100k allocations between them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">push</span> <span class="n">val</span>
</span><span class='line'>  <span class="vi">@stack</span><span class="o">.</span><span class="n">push</span> <span class="n">val</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="nb">caller</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="nb">caller</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="k">if</span> <span class="n">c</span> <span class="o">=~</span> <span class="sr">/expr_result/</span>
</span><span class='line'>  <span class="nb">warn</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_stack(push): </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2"> at line </span><span class="si">#{</span><span class="n">c</span><span class="o">.</span><span class="n">clean_caller</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">debug</span>
</span><span class='line'>  <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The two lines of interest are 3 and 4 - the assignments to the local variable <code>c</code>, which pull information from <code>caller</code>.
<code>caller</code> is a fairly expensive method, since it needs to generate a stack trace for the current method call.</p>

<p>Upon a closer look, it&#8217;s clear the <code>c</code> variable is only used in the message on the following line, and that message is only used if the <code>debug</code> flag is set.
This means we can wrap all that code in a condition, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">push</span> <span class="n">val</span>
</span><span class='line'>  <span class="vi">@stack</span><span class="o">.</span><span class="n">push</span> <span class="n">val</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">debug</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="nb">caller</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="nb">caller</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="k">if</span> <span class="n">c</span> <span class="o">=~</span> <span class="sr">/expr_result/</span>
</span><span class='line'>    <span class="nb">warn</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_stack(push): </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2"> at line </span><span class="si">#{</span><span class="n">c</span><span class="o">.</span><span class="n">clean_caller</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This change <strong>saves 38-50% on string allocations and 20-26% on parse time.</strong></p>

<h3>Reading Lines</h3>

<p>Skipping down a few unavoidable string allocations, there&#8217;s this one:</p>

<pre><code>                    sourcefile                      sourceline  count
--------------------------------------------------  ----------  -----
&lt;GEM:ruby_parser-3.11.0&gt;/lib/ruby_parser_extras.rb        1015   6818
</code></pre>

<p>Here&#8217;s the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">header</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>RubyParser checks the first couple lines of a file for any comments setting the encoding for the file. The trouble is that calling <code>String#lines</code> will split the entire string up when we only need the first two lines.</p>

<p>Grabbing only the first two lines ends up being pretty trivial thanks to Ruby&#8217;s standard approach of returning enumerators for enumeration methods if a block is not supplied:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">header</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">each_line</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>String#each_line</code> will lazily return the lines from the string, so it only does the work needed.</p>

<p>Sadly, this didn&#8217;t do much for overall string allocations and parse time since this method is only called once, but I think it&#8217;s a clear improvement to only grab the two lines needed.</p>

<h3>Freezing Strings</h3>

<p>Finally, back to the original idea. By the time I made it back to freezing string literals, I was feeling pretty lazy, so I just threw the frozen string header on <a href="https://github.com/seattlerb/ruby_parser/blob/dd2adeca68471a2de7a8d541fb145972f3e3494f/lib/ruby_lexer.rb"><code>ruby_lexer.rb</code></a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># frozen_string_literal: true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the tests showed only one method where frozen string literals did not work, so these strings needed to be <code>dup</code>ed.</p>

<p>String allocations were reduced by 24-30%, but with almost no parse time change. Probably because these were tiny, tiny strings.</p>

<h3>Final Metrics</h3>

<p>With these four changes, <strong>string allocations were reduced by 75-83% and parse time was reduced by 30-37%.</strong> The test suite for RubyParser ran 33% faster on my machine.</p>

<p>I did not see a huge decrease in peak memory use. Maybe 3%. My guess is this is because the String representation in Ruby is fairly well-optimized already (e.g. copy-on-write).</p>

<p>For Brakeman, parsing is a decent part of the run time (30-60% even), so a faster RubyParser definitely makes Brakeman scans faster. From a few test scans, I saw as much as a 30% improvement in total scan time.</p>

<h3>Final Changes</h3>

<p>The final version of the changes applied by Ryan are in <a href="https://github.com/seattlerb/ruby_parser/commit/358e5a058e1eca75c6d6ab075ae31c2cc44827a5">this commit</a>.</p>

<p>I expect these improvements will be in the next RubyParser and Brakeman releases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Price Transparency with Brakeman Pro]]></title>
    <link href="https://blog.presidentbeef.com/blog/2017/12/21/price-transparency-with-brakeman-pro/"/>
    <updated>2017-12-21T19:39:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2017/12/21/price-transparency-with-brakeman-pro</id>
    <content type="html"><![CDATA[<p>Pricing in the static analysis security tool (SAST) world is difficult. Do you charge per project? Per repository? Per line of code? Per language? Per user? What defines a &#8220;user&#8221;?
None of these approaches are very satisfying, because no single approach will cover all types of customers.</p>

<p>Instead, companies come up with per-customer pricing. Meaning they will look at a potential customer&#8217;s needs and size, and then come up with a number they think the customer might be willing to pay.</p>

<p>Then the negotation dance begins, where the customer attempts to talk the seller down 20-50% from the initial quote (which was kind of made up anyway).</p>

<p>To me, that&#8217;s stressful, time-consuming, and a little shady.</p>

<p>Personally, I do not want to deal with salespeople (and their relentless follow up emails/calls) just to get a rough idea of what a product will cost.</p>

<p>With Brakeman Pro, I wanted to be upfront and honest with customers. That&#8217;s why, as far as I know, we are the only commercial SAST with <a href="https://brakemanpro.com/purchase/pricing">publicly-available pricing</a>.</p>

<p>Want to purchase a license? You can buy with a credit card on the website and you never have to talk to anyone! That is the kind of interaction I like to have with a company - not &#8220;request a quote&#8221; or &#8220;contact us for pricing&#8221;.</p>

<p>Does that mean we make less money than if we had hidden price lists and made up numbers based on what we think a customer would pay? Almost certainly. Our customers range from companies making billions per year to individual users. It would be &#8220;smarter&#8221; to have the large companies pay more.</p>

<p>But the &#8220;mission&#8221; of the company is not to maximize profit. It is to fund development of a security product that will <em>help make the world a little safer</em>.</p>

<p>That is why it has been more important to me that we focus on number of customers, rather than overall revenue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenges When Building Commercial Versions of Open Source]]></title>
    <link href="https://blog.presidentbeef.com/blog/2017/03/08/challenges-when-building-commercial-versions-of-oss/"/>
    <updated>2017-03-08T21:53:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2017/03/08/challenges-when-building-commercial-versions-of-oss</id>
    <content type="html"><![CDATA[<p>It has been roughly three years since the ball began rolling on <a href="https://brakemanpro.com/">Brakeman Pro</a> (the commercial version of the <a href="http://brakemanscanner.org/">Brakeman</a> security tool for Ruby on Rails), and it has been a little over a year since Brakeman Pro actually <a href="https://brakemanpro.com/blog/announcement/2015/11/18/brakeman-pro-is-available">went on sale</a>. I have learned a ton in that time (and I am still having lessons beaten into me). There have been a ton of challenges going from an OSS project that was never meant to be a paid product to one people are actually buying. Here are just a couple I have much time thinking about:</p>

<h2>The &#8220;Free&#8221; Version</h2>

<p>Clearly, what makes building a commercial product on top of an OSS project different from just selling some software is the existing OSS project itself.</p>

<p>With an OSS project, there is an opportunity to acquire a large number of people testing the software in many different environments. For a static analysis tool like Brakeman, testing on a wide variety of codebases is incredibly valuable. OSS with easy bug reporting and contributing (e.g. a GitHub repo) is not only very likely to receive bug reports and patches, but also suggestions for features and improvements. Brakeman does not receive a large number of code contributions, but bug reports and suggestions for new rules have driven a large chunk of Brakeman’s development.</p>

<p>Being free and open source also makes it easier to advertise your project. People are more willing to promote free software and you can share it around social media with little fear of backlash. Not to mention it is vastly easier to give  conference talks about open source tools!</p>

<p>Personally, I will forever be grateful to the OSS community. Being the main author of widely-used (within a small niche) software has propelled most of my career, led to me speaking all over the world, and has brought me acquaintances and friends I would not have otherwise. I am very glad Brakeman is open source and I would never want to change that.</p>

<p>However, the existence of a &#8220;free&#8221; version, especially a successful one, has a serious drawback for a business. In particular, <strong>the &#8220;paid&#8221; version must now not only justify its utility, but also the <em>incremental</em> advantage over the free version.</strong> It has become abundantly clear the biggest competitor to Brakeman Pro is Brakeman OSS!</p>

<p>The number one question I receive regarding Brakeman Pro is &#8220;What is the difference between Pro and the open source version?&#8221; Among other things, one very simple, easy-to-explain difference is the existence of a <a href="https://brakemanpro.com/features#dt">GUI</a>. However, most people want to know if it will &#8220;find more things.&#8221; This leads to considerable hedging from me because Pro probably will find <em>different</em> vulnerabilities while also reducing <em>some</em> false positives - the net outcome of which may be more or fewer overall warnings. Explaining why Pro may report different vulnerabilities quickly gets me lost in fine details of how the two tools work - at which point people&#8217;s eyes tend to glaze over.</p>

<p>Trying to quantify the differences between the OSS and Pro versions is a losing battle for me. Potential customers try to add up all these little details and see if it comes out to enough of a difference to begin paying for software they are used to having for free. But, as a technical person, papering over the differences with hyperbolic qualitative statements can seem dishonest. I have yet to arrive at a good solution for this problem.</p>

<h2>Existing User Base</h2>

<p>With a well-established OSS project comes another big advantage: the existing user base. These users already like the project and have found it useful! In a way, they have validated a market exists for the product. In the case of Brakeman, I have also felt a tremendous amount of goodwill from the community (for which, again, I am incredibly thankful).</p>

<p>These users are going to be the <em>very first</em> people in line to try the commercial product.* They will already be familiar with the OSS version - therefore communicating and justifying the <em>additional</em> value of the commercial version will be critical. The good news is they already know what the product does and have found it valuable. In some cases (but not very many, I’ve found) they may even purchase the product just to support the OSS version. In most cases, though, people need to justify why they are spending budget on this particular software instead of using the free version.</p>

<p><strong>If you are like me, you may also find this existing user base to be a source of stress.</strong> Marketing to OSS users often feels scummy, but it also makes no sense not to promote the commercial tool to the people already using the free version! For quite a while I did not want to take advantage of the existing audience at all. I have only made very small steps in that direction, preceded by a lot of thought. The last thing I want to do is alienate the community or burn any of the goodwill Brakeman has.</p>

<p>One way to push customers towards the commercial version is to make the OSS version obviously <em>worse</em>. But while it would make selling the commercial version easier, not working on or supporting the OSS version is unthinkable. Even the appearance of doing so could turn a community against you. When your potential customers are mostly developers the support of the developer community has extreme value. Besides the business aspect, I personally would have a hard time dealing with loss of the community when the community has done so much for me.</p>

<p>That leaves making the commercial version <em>so much better</em> than the OSS version the additional value is ridiculously obvious and people happily pay for it. Sadly (gladly?), many people have let me know &#8220;the free version of Brakeman is really good and already does all I need.&#8221; Making the Pro version <em>extra awesome</em> without hurting the OSS version is an ongoing struggle which I continue to hope will resolve itself over time as we continue to improve Pro.</p>

<p>Like many things, the existing user base for an OSS project has both advantages and disadvantages which need to be considered and kept in mind if one is going to turn the project into a commercial product.</p>

<h2>As a Security Tool&#8230;</h2>

<p>This probably does not apply to very many projects, but as a security tool Brakeman has additional issues related to those above. With every feature that might be exclusive to Pro, I must consider - <strong>&#8220;Am I making the world <em>less safe</em> by not adding this feature to the OSS version?&#8221;</strong> The answers to this question likely lead me to make terrible business decisions. In the end I can live without Brakeman Pro being a successful business, but consciously compromising my integrity and potentially the security of applications is not something I could personally handle.</p>

<p>As a result, the features that tend to go into Pro but not the OSS version are noisier, slower, or focused on ease of use and not actual vulnerability discovery. I believe more false positives (but potentially more true positives) are acceptable in the Pro version because we make it easy to triage and ignore them. Slower features are also much more acceptable in the Pro version - the OSS version needs to be fast and lean. (Sometimes these features also end up in OSS, just off by default. &#8220;Off by default&#8221; means they might as well not exist for most users.)</p>

<h2>Conclusions</h2>

<p>If you are considering taking an open source project and building a commercial tool on top of it, I hope this little post has given you some (perhaps less obvious?) issues to ponder. For Brakeman users, I hope this explains a little bit of the thinking I have done while trying to balance between OSS and Pro.</p>

<p>Note that this blog post is actually an example of the first two issues above: I had to tell you about the &#8220;free&#8221; version to talk about the Pro version and at the same time you probably feel like this is a bit of an advertisement for the Pro version!</p>

<p>(I think I have to plug my product here now? <a href="https://brakemanpro.com/">Brakeman Pro is a static analysis security tool for Ruby on Rails applications</a>. <a href="https://brakemanpro.com/purchase/pricing">Try it out for free</a>.)</p>

<hr />

<p>* <em>One of the early mistakes I made with Brakeman Pro was not realizing who the first customers would be. I thought the people most willing to <em>buy</em> a tool would be security auditors, and so the tool and pricing were targeted at <em>security professionals</em>. Unfortunately, the much larger market and initial user base for Brakeman are developers. Brakeman Pro should have made developers our top priority from the beginning just like Brakeman OSS does.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundling Dependencies inside Ruby Gems]]></title>
    <link href="https://blog.presidentbeef.com/blog/2016/08/09/bundling-gem-dependencies-inside-ruby-gems/"/>
    <updated>2016-08-09T08:53:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2016/08/09/bundling-gem-dependencies-inside-ruby-gems</id>
    <content type="html"><![CDATA[<h3>Backstory</h3>

<p>I recently decided to distribute the <a href="http://brakemanscanner.org/">Brakeman</a> gem with all its dependencies included.
This was the culmination of a lot of frustration with <a href="https://github.com/presidentbeef/brakeman/issues/659">Bundler</a>, <a href="https://github.com/presidentbeef/brakeman/issues/709">version conflicts</a>, <a href="https://github.com/presidentbeef/brakeman/issues/767#issuecomment-180964293">RubyGem bugs</a>, and trying to maintain compatibility with older versions of Ruby <a href="https://github.com/presidentbeef/brakeman/pull/602#issuecomment-69494355">while libraries did not</a>.</p>

<p>Brakeman is most often used as an <em>application</em>, not a library. Yet most Rubyists are used to including <em>all</em> dependencies in a <code>Gemfile</code> for use with Bundler.
Doing so causes Brakeman&#8217;s dependencies to be mixed in with users&#8217; application dependencies, which doesn&#8217;t make sense and causes a lot of anguish.</p>

<p>I liken it to having to worry about whether or not your Rails application&#8217;s dependencies conflict with your browser&#8217;s. It shouldn&#8217;t matter.</p>

<p>However, Bundler does not have a way to isolate dependencies for applications like Brakeman, and Bundler is the best way to manage dependencies so we are stuck with it.</p>

<p>Since Brakeman is not normally loaded into users&#8217; applications (and I recommend against doing so), its dependencies are separate and should not really matter to the end user.
To this end, I wanted to distribute Brakeman with all its dependencies already inside the gem.</p>

<h3>Bundling Dependencies</h3>

<p>Conveniently, Bundler already has a way to do this: <code>bundle install --standalone</code>.
This generates a <code>bundle</code> directory with two subdirectories <code>bundler</code> and <code>ruby</code>.</p>

<p>The <code>bundler</code> directory just has one file: <code>setup.rb</code>. This file adds the bundled gems to the load path. We&#8217;ll come back to this file later.</p>

<p>The <code>ruby</code> directory has everything you need to run Bundler, along with all of the bundled gems and their executables.
The path to the gems looks something like <code>ruby/2.3.0/gems/rake-10.1.1/</code>.
Note this includes the Ruby version and the gem&#8217;s version.
When <code>setup.rb</code> sets up the library paths, it chooses dynamically based on the running Ruby implementation and version (which is not what we want, see below).</p>

<h3>Adding Dependencies</h3>

<p>All the dependencies are now there in the <code>bundle/</code> directory, but it&#8217;s still assumed you will be using Bundler.
I would prefer to just load the dependencies myself.</p>

<p>To do so, the Brakeman build script removes the <code>bundle/bundler/setup.rb</code> file and generates its own <code>load.rb</code> using similar logic.
However, it does not build paths dependent on the running Ruby version because we don&#8217;t know what the end user will be using.
Instead, it just globs the paths as they are and loads those.</p>

<p>In Brakeman itself, it loads <code>bundle/load.rb</code> <a href="https://github.com/presidentbeef/brakeman/blob/fb4f9de160fd97a2b72d5e01c16058718941ec3d/lib/brakeman.rb#L431-L439">lazily</a> if the file exists. I do not use it in normal testing or development.
In general, all that is needed is to <code>require</code> the <code>load.rb</code> file inside your code somewhere.</p>

<h3>Building the Gem</h3>

<p>All that is left to do is add the bundled gems to the Brakeman gem itself.</p>

<p>Note that Brakeman&#8217;s Gemfile relies on its gemspec, but the gemspec needs to rely on the bundled gems, leading to a circular dependency.</p>

<p>This simple code is all that is required in the gemspec:</p>

<pre><code>if File.exist? 'bundle/load.rb'
  s.files += Dir['bundle/ruby/*/gems/**/*'] + ['bundle/load.rb']
else
  # add dependencies as normal
end
</code></pre>

<h3>Pros</h3>

<p>The main advantage of this approach is not polluting application dependencies!
No more version conflicts! No more worries that weird Bundler or gem bugs will break users&#8217; installs.</p>

<p>In theory it also makes it easier to distribute Brakeman as a standalone application, if someone were interested in that.</p>

<h3>Cons</h3>

<p>The main problem, of course, is that this hides the dependencies.
If you add Brakeman as a dependency and then either load it programmatically or run it with Rake, you may get mysterious library conflicts.
To avoid this, use the &#8221;<a href="https://rubygems.org/gems/brakeman-lib">brakeman-lib</a>&#8221; gem, which is the same as the main Brakeman gem but does not bundle dependencies.</p>

<p>It also locks dependencies to a specific version such that updating dependencies requires a new release.
This can be good (avoid breaking with new versions) but it can also be bad if a library has a bug or vulnerability.</p>

<h3>Code</h3>

<p>The script I use to build the main Brakeman gem is <a href="https://github.com/presidentbeef/brakeman/blob/fb4f9de160fd97a2b72d5e01c16058718941ec3d/build.rb">here</a>.</p>

<p>Here&#8217;s the annotated version:</p>

<pre><code>#!/usr/bin/env ruby
puts 'Packaging Brakeman gem...'

# Clean up any existing build artifacts
system 'rm -rf bundle Gemfile.lock brakeman-*.gem' and

# Generate gem bundle in ./bundle
system 'BM_PACKAGE=true bundle install --standalone'

abort "No bundle installed" unless Dir.exist? 'bundle'

# Remove the setup.rb file we don't use
File.delete "bundle/bundler/setup.rb"
Dir.delete "bundle/bundler"

# Generate new file to set load paths
# Code below is a little confusing because it is generating code
File.open "bundle/load.rb", "w" do |f|

  # Set path at runtime
  f.puts "path = File.expand_path('../..', __FILE__)"

  # Add each gem's lib/ directory to the load path (again at runtime)
  Dir["bundle/ruby/**/lib"].each do |dir|
    f.puts %Q[$:.unshift "\#{path}/#{dir}"]
  end
end

# Build the gem
system "BM_PACKAGE=true gem build brakeman.gemspec"
</code></pre>

<p>When bundling gems and building the gem, the script sets the <code>BM_PACKAGE</code> variable so that development dependencies <a href="https://github.com/presidentbeef/brakeman/blob/fb4f9de160fd97a2b72d5e01c16058718941ec3d/brakeman.gemspec#L22">are not included</a> in the bundled gems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically Lock Old Closed GitHub Issues]]></title>
    <link href="https://blog.presidentbeef.com/blog/2016/06/12/automatically-lock-old-closed-github-issues/"/>
    <updated>2016-06-12T22:27:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2016/06/12/automatically-lock-old-closed-github-issues</id>
    <content type="html"><![CDATA[<p>I am not sure this is a problem everyone has, but I grew tired of people commenting on old, resolved GitHub issues.
Almost every time someone would comment &#8220;I have this problem, too&#8221; it would actually be a different issue. Then I&#8217;d
go through the routine of asking them to open a new issue with details about their specific problem.
Sometimes they would, and sometimes they&#8217;d never come back.</p>

<p>Fortunately, right around the time I decided I should do something about this annoyance, <a href="https://developer.github.com/changes/2016-02-11-issue-locking-api/">GitHub released an API</a>
to lock issues. (<a href="https://github.com/blog/1847-locking-conversations">Locking issues or pull requests</a> prevents any new comments except from repo collaborators.)</p>

<p>So I put together a little gem called <a href="https://github.com/presidentbeef/github-auto-locker">github-auto-locker</a> to fetch and lock old, closed issues.</p>

<p>To install it (requires Ruby):</p>

<pre><code>gem install github-auto-locker
</code></pre>

<p>Then run:</p>

<pre><code>github-auto-locker USER REPO TOKEN [age in days]
</code></pre>

<p>For example, I run this to lock resolved issues over 60 days old:</p>

<pre><code>github-auto-locker presidentbeef brakeman N0TM1R34L70K3N 60
</code></pre>

<p>The default is 120 days.</p>

<p>I&#8217;ve been running it periodically myself since February without any complaints.
Perhaps it will be useful to you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Readers-Writer Lock Gem]]></title>
    <link href="https://blog.presidentbeef.com/blog/2014/02/28/simple-readers-writer-lock-gem/"/>
    <updated>2014-02-28T08:53:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2014/02/28/simple-readers-writer-lock-gem</id>
    <content type="html"><![CDATA[<p>A <a href="http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock">readers-writer lock</a> can be used to allow many concurrent read-only operations on a resource but ensure exclusive access for modifying operations performed by &#8220;writers&#8221;. For my purposes, I needed a readers-writer lock at the thread level, basically to control access to a shared array. In my scenario, the array is accessed through a server which may server many clients at once. Some requests will be to read elements from the array, while other requests might be adding elements to the array. There is no reason to restrict reads to one client at a time, but elements need to be added while no other client is reading or writing to the array.</p>

<p><a href="https://github.com/presidentbeef/rwlock">My implementation</a> is very simple (the entire <code>RWLock</code> class is 25 lines of code) because it relies on Ruby&#8217;s <a href="http://rdoc.info/stdlib/thread/SizedQueue">SizedQueue</a> class. <code>SizedQueue</code> provides a thread-safe queue with a maximum size. If a thread attempts to add elements to a queue that is full, it will be blocked until an element is removed from the queue to make room. This is a key piece of funtionality used for the readers-writer lock implementation.</p>

<p>The <code>RWLock</code> class only really needs to provide two methods: one to provide read access, and one to provide write access. Since this is Ruby, the methods will take a block to execute the reading/writing code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RWLock</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read_sync</span>
</span><span class='line'>    <span class="c1">#lock magic</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="c1">#lock magic</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write_sync</span>
</span><span class='line'>    <span class="c1">#lock magic</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>    <span class="c1">#lock magic</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The internal state of the lock will be a <code>SizedQueue</code> and a <code>Mutex</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">max_size</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="vi">@write_lock</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@q</span> <span class="o">=</span> <span class="no">SizedQueue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">max_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>SizedQueue</code> will essentially be used as a counting semaphore. Each time a reader enters <code>read_sync</code>, the lock will push an element onto the queue. What the element actually is doesn&#8217;t matter, but I used <code>true</code> because it&#8217;s cheap. If the queue is full, the reader will block until a space has opened up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">read_sync</span>
</span><span class='line'>    <span class="vi">@q</span><span class="o">.</span><span class="n">push</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>  <span class="k">ensure</span>
</span><span class='line'>    <span class="vi">@q</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a writer calls <code>write_sync</code>, it synchronizes on the mutex to prevent multiple concurrent writers. Then it adds <em>n</em> elements to the queue, where <em>n</em> is equal to the maximum size of the queue.</p>

<p>This has two effects: first, the writer is forced to wait for all current readers to finish. Second, it essentially prevents any new readers from gaining access (there is a small chance one will sneak in, but the writer will still have to wait for it).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">write_sync</span>
</span><span class='line'>    <span class="vi">@write_lock</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@q</span><span class="o">.</span><span class="n">max</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@q</span><span class="o">.</span><span class="n">push</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="k">yield</span>
</span><span class='line'>      <span class="k">ensure</span>
</span><span class='line'>        <span class="vi">@q</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the writer is finished, the queue is cleared, allowing all waiting readers to jump in. It is most likely waiting readers will get in before waiting writers, since the write mutex is held while the queue is emptied, but no effort is made to guarantee that one way or another. In practice, though, this seems to balance well between readers and writers.</p>

<p>One obvious downside of this overall approach is the <code>SizedQueue</code> limits the number of concurrent readers. A larger queue will cause writers to wait longer (assuming many readers) while a smaller queue may cause readers to wait on other readers. The upside is readers cannot monopolize the resource and cause writer starvation.</p>

<p>Unfortunately, <code>SizedQueue#clear</code> has been broken forever, since it was simply inherited from <code>Queue</code> and didn&#8217;t actually notify waiting threads that the queue is empty. For some reason, this does not appear to matter in Ruby 1.8, but in Ruby 1.9 and 2.0 it caused a deadlock.</p>

<p>This has been fixed in Ruby 1.9.3p545 and 2.1.1. For broken versions, the <code>RWLock</code> gem monkey-patches <code>SizedQueue</code> to fix the behavior. Unfortunately, Ruby 2.0 also had a bug in <code>SizedQueue#push</code>, so it is completely incompatible. The code does work under JRuby, but there are faster implementations using Java primitives.</p>

<p>RWLock is available as <a href="https://rubygems.org/gems/rwlock">a gem</a> and of course the <a href="https://github.com/presidentbeef/rwlock">code is on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Brakeman Against 253 Rails Apps]]></title>
    <link href="https://blog.presidentbeef.com/blog/2013/11/01/testing-brakeman/"/>
    <updated>2013-11-01T07:54:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2013/11/01/testing-brakeman</id>
    <content type="html"><![CDATA[<p>Here is some information about how <a href="http://brakemanscanner.org/">Brakeman</a> is tested!</p>

<h3>Basic Testing and Continuous Integration</h3>

<p>Brakeman does have a few unit tests&#8230;pitifully few. In fact, Brakeman had no tests at all until version <a href="https://github.com/presidentbeef/brakeman/blob/master/CHANGES#L490">0.5.2</a>, nearly a year after Brakeman&#8217;s initial public release. Unit testing Brakeman remains difficult, since much of the code relies on data built up from scanning an entire Rails application.</p>

<p>As such, the majority of tests in Brakeman rely on scanning <a href="https://github.com/presidentbeef/brakeman/tree/master/test/apps">sample applications</a> and checking the resulting reports for an expected set of warnings. There are tests for the presence and absence of specific warnings, as well as checking for the specific number of warnings and an absence of reported errors. Since writing tests is pretty tedious, there is <a href="https://github.com/presidentbeef/brakeman/blob/master/test/to_test.rb">a script</a> which generates the Ruby code to asserts the presence of reported warnings. This script takes the same arguments as Brakeman, so it&#8217;s simple to generate a set of tests for a specific scenario.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_information_disclosure_local_request_config</span>
</span><span class='line'>  <span class="n">assert_warning</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:warning</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:warning_code</span> <span class="o">=&gt;</span> <span class="mi">61</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:fingerprint</span> <span class="o">=&gt;</span> <span class="s2">&quot;081f5d87a244b41d3cf1d5994cb792d2cec639cd70e4e306ffe1eb8abf0f32f7&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:warning_type</span> <span class="o">=&gt;</span> <span class="s2">&quot;Information Disclosure&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="sr">/^Detailed\ exceptions\ are\ enabled\ in\ produ/</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:confidence</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:relative_path</span> <span class="o">=&gt;</span> <span class="s2">&quot;config/environments/production.rb&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests run on <a href="https://travis-ci.org/presidentbeef/brakeman">Travis CI</a> which is integrated with GitHub. This is especially helpful for testing compatibility with Ruby 1.8.7, which many Rails applications still run on and Brakeman will probably continue supporting for a long time.</p>

<h3>Regression Testing with a Wide Net</h3>

<p>Unfortunately, the sample applications Brakeman uses for tests are quite limited, not real, and generally just test very specific warnings or previous bugs. To gain higher confidence that Brakeman is not too broken, Brakeman is run against a set of 253 open source Rails applications I have managed to scrape together. (If you have an open source application to add to this test set, please let me know!)</p>

<p>The scans are run on my personal machine - six jobs in parallel, which takes about nine minutes total. After puttering around with a few different approaches, I ended up simply using the <a href="http://rdoc.info/stdlib/thread/Queue">Queue</a> class from Ruby&#8217;s standard library as the job queue. In a Frankenstein combination, a shell script starts up a JRuby process, which builds the Brakeman gem and then runs six threads for scan jobs. Each job launches Brakeman as an external process running under MRI 1.9.3 and, if successful, produces a JSON report. The JSON report is then augmented with some information about the Brakeman commit and the app that was scanned.</p>

<p>When all the apps have been scanned, the JSON reports are tarred up and sent to a server. I use <a href="https://www.digitalocean.com/?refcode=35d9e7aec070">DigitalOcean</a> (referral link!) because I needed an Ubuntu setup and their API lets me use some handy <a href="https://github.com/presidentbeef/my_ocean">scripts</a> to spin the server up and down whenever I need it (and only pay for when it&#8217;s up).</p>

<p>On the server, the reports are unpacked and imported into a <a href="http://rethinkdb.com/">RethinkDB</a> database. Since RethinkDB stores JSON documents, it&#8217;s simple to dump the JSON reports from Brakeman in there. I just have two tables: one just contains commit SHAs and their timestamps, and the other contains the actual reports. I have secondary indexes on the reports to efficiently look them up by the name of the Rails app or the Brakeman SHA.</p>

<p>A small <a href="http://www.sinatrarb.com/">Sinatra</a> app serves up some basic graphs and allows two commits to be compared:</p>

<p><img src="https://blog.presidentbeef.com/images/blog/brakeman-graphs.png" title="Ugly, I know" alt="Brakeman Graphs" /></p>

<p>This &#8220;system&#8221; is not open source at the moment, but probably will be in the future when I&#8217;ve removed hard-coded stuff.</p>

<p>Anyhow, since I have all these reports, I can share some data&#8230;but just be forewarned you can&#8217;t really draw any conclusions from it!</p>

<h3>Numbers!</h3>

<p>This is the RethinkDB query for warnings per category, in JavaScript since I ran it in the web UI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">r</span><span class="p">.</span><span class="nx">db</span><span class="p">(</span><span class="s2">&quot;brakeman&quot;</span><span class="p">).</span>
</span><span class='line'>  <span class="nx">table</span><span class="p">(</span><span class="s2">&quot;reports&quot;</span><span class="p">).</span>
</span><span class='line'>  <span class="nx">getAll</span><span class="p">(</span><span class="s2">&quot;25a41dfcd9171695e731533c50de573c71c63deb&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">index</span><span class="o">:</span> <span class="s2">&quot;brakeman_sha&quot;</span><span class="p">}).</span>
</span><span class='line'>  <span class="nx">concatMap</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">rep</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">rep</span><span class="p">(</span><span class="s2">&quot;brakeman_report&quot;</span><span class="p">)(</span><span class="s2">&quot;warnings&quot;</span><span class="p">)</span> <span class="p">}).</span>
</span><span class='line'>  <span class="nx">groupBy</span><span class="p">(</span><span class="s2">&quot;warning_type&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">count</span><span class="p">).</span>
</span><span class='line'>  <span class="nx">orderBy</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">desc</span><span class="p">(</span><span class="s2">&quot;reduction&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<table>
  <tr>
    <th>
      <strong>Warning Category</strong>
    </th>
    <th>
      <strong>Count</strong>
    </th>
  </tr>
  <tr>
    <td>
      Cross Site Scripting
    </td>
    <td>
      6669
    </td>
  </tr>
  <tr>
    <td>
      Mass Assignment
    </td>
    <td>
      3385
    </td>
  </tr>
  <tr>
    <td>
      SQL Injection
    </td>
    <td>
      1353
    </td>
  </tr>
  <tr>
    <td>
      Remote Code Execution
    </td>
    <td>
      458
    </td>
  </tr>
  <tr>
    <td>
      Denial of Service
    </td>
    <td>
      440
    </td>
  </tr>
  <tr>
    <td>
      Redirect
    </td>
    <td>
      232
    </td>
  </tr>
  <tr>
    <td>
      Format Validation
    </td>
    <td>
      230
    </td>
  </tr>
  <tr>
    <td>
      Attribute Restriction
    </td>
    <td>
      205
    </td>
  </tr>
  <tr>
    <td>
      File Access
    </td>
    <td>
      200
    </td>
  </tr>
  <tr>
    <td>
      Session Setting
    </td>
    <td>
      169
    </td>
  </tr>
  <tr>
    <td>
      Dynamic Render Path
    </td>
    <td>
      140
    </td>
  </tr>
  <tr>
    <td>
      Command Injection
    </td>
    <td>
      116
    </td>
  </tr>
  <tr>
    <td>
      Cross-Site Request Forgery
    </td>
    <td>
      96
    </td>
  </tr>
  <tr>
    <td>
      Default Routes
    </td>
    <td>
      67
    </td>
  </tr>
  <tr>
    <td>
      Response Splitting
    </td>
    <td>
      44
    </td>
  </tr>
  <tr>
    <td>
      Dangerous Eval
    </td>
    <td>
      43
    </td>
  </tr>
  <tr>
    <td>
      Dangerous Send
    </td>
    <td>
      33
    </td>
  </tr>
  <tr>
    <td>
      Nested Attributes
    </td>
    <td>
      5
    </td>
  </tr>
  <tr>
    <td>
      Information Disclosure
    </td>
    <td>
      2
    </td>
  </tr>
  <tr>
    <td>
      Authentication
    </td>
    <td>
      2
    </td>
  </tr>
</table>


<br>


<p>Some educated guesses about these numbers:</p>

<ul>
<li>Mass assignment numbers are likely high because they include warnings about dangerous attributes that are whitelisted.</li>
<li>Remote code injection is mostly uses of <code>constantize</code> and similar methods.</li>
<li>Most denial of service warnings are calls to <code>to_sym</code> on parameters</li>
<li>Response splitting is interesting because it is only reported in regards to <a href="https://groups.google.com/d/msg/rubyonrails-security/b_yTveAph2g/jKe6OuRC47sJ">CVE-2011-3186</a> which was fixed in Rails 2.3.13.</li>
</ul>


<p>This last point made me curious about the Rails versions in use by the applications. Keeping in mind these apps are not necessarily up-to-date, they represent at least 37 different versions! Some were reported as unknown versions.</p>

<p>Here are the top ten:</p>

<table>
  <tr>
    <th>
      <strong>Rails Version</strong>
    </th>
    <th>
      <strong>Count</strong>
    </th>
  </tr>
  <tr>
    <td>
      3.2.13
    </td>
    <td>
      26
    </td>
  </tr>
  <tr>
    <td>
      2.3.5
    </td>
    <td>
      19
    </td>
  </tr>
  <tr>
    <td>
      3.0.3
    </td>
    <td>
      18
    </td>
  </tr>
  <tr>
    <td>
      3.2.14
    </td>
    <td>
      14
    </td>
  </tr>
  <tr>
    <td>
      4.0.0
    </td>
    <td>
      11
    </td>
  </tr>
  <tr>
    <td>
      3.2.12
    </td>
    <td>
      9
    </td>
  </tr>
  <tr>
    <td>
      2.3.8
    </td>
    <td>
      8
    </td>
  </tr>
  <tr>
    <td>
      3.2.11
    </td>
    <td>
      8
    </td>
  </tr>
  <tr>
    <td>
      3.0.0
    </td>
    <td>
      7
    </td>
  </tr>
  <tr>
    <td>
      3.1.0
    </td>
    <td>
      6
    </td>
  </tr>
</table>


<br>


<p>With so many applications and nearly 14,000 warnings, there is a lot more information to go through here.</p>

<p>For now this process is used to help test new Brakeman code and avoid regressions. It&#8217;s stopped quite a few bugs from going out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Compact Sparse Bit Sets]]></title>
    <link href="https://blog.presidentbeef.com/blog/2013/09/02/fast-compact-sparse-bitsets/"/>
    <updated>2013-09-02T14:49:00-07:00</updated>
    <id>https://blog.presidentbeef.com/blog/2013/09/02/fast-compact-sparse-bitsets</id>
    <content type="html"><![CDATA[<p>Imagine you need a relatively compact data structure for quickly checking membership of mostly-consecutive non-negative integers. (If this sounds really specific, it is because it is precisely what I needed for a particular project.)</p>

<p>The Ruby standard library contains a <a href="http://rdoc.info/stdlib/set/1.9.3/Set">Set</a> class which may be a good starting point. Set is actually implemented as a Hash with the Set elements as keys and <code>true</code> as the values. Thus the overhead for storing a value in the Set is essentially only the value itself since all keys point to the same <code>true</code> object. Assuming a 64-bit machine, the overhead will be 64 bits per value. This seems reasonable, but given the specific limitations of the values we wish to store, perhaps we can do better?</p>

<h3>Bit Sets</h3>

<p>A bit set is a compact data structure of binary values where membership is indicated by setting a bit to 1. The position of the bit indicates the element value. For example, the second bit from the right might be used to indicate whether or not the value 1 is in the set.</p>

<p>One method to determine membership is to AND the bit set with a mask with only the desired bit set to 1. If the result is 0, the value is not in the set. If it is any other result (actually the mask itself, but the zero check is sufficinet), the value is a member of the set.</p>

<p>In Ruby, this looks like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bitset</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, to check if the value 4 is in the set, we use the mask <code>00010000</code> (the 5th bit from the right is set to 1) which is the decimal value <code>8</code>:</p>

<p><img src="https://blog.presidentbeef.com/images/blog/bitset-example1.png" alt="Bit Set Checking Example 1" /></p>

<p>Since the result is zero, we know the value 4 is not in the set.</p>

<p>If we check for the value <code>6</code>, the result is not zero, indicating the value is a member of the set:</p>

<p><img src="https://blog.presidentbeef.com/images/blog/bitset-example2.png" alt="Bit Set Checking Example 2" /></p>

<p>Now, instead of 64 bits per value, it only requires a single bit! Now we just need to put a lot of bits together, either by using a long string or a bunch of integers in an array.</p>

<h3>Sparse Bit Sets</h3>

<p>The problem with a long binary string or an array of integers is that membership is entirely position-based. To store the value <code>1000</code>, the data structure requires 1001 bits, all but one of which is set to 0. This is quite inefficient, especially for very large values.</p>

<p>One solution is to create a sparse bit set by combining a hash table with bit sets as values. The hash table keys provide fast look up of the correct bit set, then the bit set is checked for the desired element. The keys indicate the lowest value stored in the bit set (e.g., the decimal key <code>4</code> pointing to the binary bit set <code>00000001</code> would mean the value <code>4</code> is in the set).</p>

<p>Below is an example of a hash table using integer keys and 8 bit integers for the bit sets:</p>

<p><img src="https://blog.presidentbeef.com/images/blog/sparse-bitset-example.png" alt="Sparse Bit Set Example" /></p>

<p>The average overhead is <code>⌊(m * n) / w⌋ + m</code> bits, where <em>m</em> is the number of values (assumed to be consecutive), <em>w</em> is the number of bits per bit set, and <em>n</em> is the number of bits per key. In 64-bit Ruby, if we use integers for the bit sets, <em>n</em> = 64 and <em>w</em> = 62<a href="#footnote">*</a>. This works out to an average of 2 bits per value in the set. Of course, a single value incurs the overhead of both the key and the bit set: 128 bits! But if there are many consecutive values, the cost per value begins to shrink. For example, the numbers 0 to 61 can be stored in a single bit set, so 62 values can be stored in the 128 bits and we are back to about 2 bits per value.</p>

<p>Note that while it is best to use consecutive values which fit neatly into the bit sets (in this case, runs of 62 integers), the sequences can start and end at arbitrary points with only a little &#8220;wasted&#8221; overhead. To store just the number <code>1000</code>, we now only need 128 bits, not 1001.</p>

<p>On top of the space savings, the membership checks remain fast. Still assuming 64-bit Ruby, to determine if a value is in the table look up index <code>i = value / 61</code>. Then check the bit set with <code>bitset &amp; (1 &lt;&lt; (value % 61) != 0</code> as previously. (The divisor is 61 because there are 62 bits, but the values are 0 to 61).</p>

<h3>Space Efficiency</h3>

<p>I have implemented a Ruby version of the data structure described above which I call the <a href="https://github.com/presidentbeef/dumb-numb-set">Dumb Numb Set</a> (DNS).</p>

<p>To measure the space used by the bit sets, we compare the Marshal data size for the bit sets versus regular Hashes (using <code>true</code> for all values, just like a Ruby Set).</p>

<p>These are the results for perfectly ordered data on a 64-bit version of Ruby 1.9.3 (size is number of bytes):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Items</span>        <span class="no">Hash</span>         <span class="no">DNS</span>      <span class="o">%</span><span class="n">reduction</span>
</span><span class='line'><span class="o">---------------------------------------------</span>
</span><span class='line'>   <span class="mi">1</span>   <span class="o">|</span>           <span class="mi">7</span>  <span class="o">|</span>        <span class="mi">41</span>   <span class="o">|-</span><span class="mi">486</span><span class="o">%</span>
</span><span class='line'> <span class="mi">100</span>   <span class="o">|</span>         <span class="mi">307</span>  <span class="o">|</span>        <span class="mi">61</span>   <span class="o">|</span>  <span class="mi">80</span><span class="o">%</span>
</span><span class='line'>  <span class="mi">1</span><span class="n">k</span>   <span class="o">|</span>        <span class="mi">4632</span>  <span class="o">|</span>       <span class="mi">253</span>   <span class="o">|</span>  <span class="mi">95</span><span class="o">%</span>
</span><span class='line'> <span class="mi">10</span><span class="n">k</span>   <span class="o">|</span>       <span class="mi">49632</span>  <span class="o">|</span>      <span class="mi">2211</span>   <span class="o">|</span>  <span class="mi">96</span><span class="o">%</span>
</span><span class='line'><span class="mi">100</span><span class="n">k</span>   <span class="o">|</span>      <span class="mi">534098</span>  <span class="o">|</span>     <span class="mi">24254</span>   <span class="o">|</span>  <span class="mi">95</span><span class="o">%</span>
</span><span class='line'>  <span class="mi">1</span><span class="n">M</span>   <span class="o">|</span>     <span class="mi">5934098</span>  <span class="o">|</span>    <span class="mi">245565</span>   <span class="o">|</span>  <span class="mi">96</span><span class="o">%</span>
</span><span class='line'> <span class="mi">10</span><span class="n">M</span>   <span class="o">|</span>    <span class="mi">59934098</span>  <span class="o">|</span>   <span class="mi">2557080</span>   <span class="o">|</span>  <span class="mi">96</span><span class="o">%</span>
</span><span class='line'><span class="mi">100</span><span class="n">M</span>   <span class="o">|</span>   <span class="mi">683156884</span>  <span class="o">|</span>  <span class="mi">26163639</span>   <span class="o">|</span>  <span class="mi">96</span><span class="o">%</span>
</span><span class='line'>  <span class="mi">1</span><span class="n">B</span>   <span class="o">|</span>         <span class="p">?</span>    <span class="o">|</span> <span class="mi">262229211</span>   <span class="o">|</span>   <span class="p">?</span>
</span><span class='line'><span class="o">---------------------------------------------</span>
</span></code></pre></td></tr></table></div></figure>


<p>At 1 billion items, my machine ran out of memory.</p>

<p>For a single item, as expected, overhead in the DNS is quite high. But for as little as 100 items in the set, the DNS is considerably more compact.</p>

<p>This is, however, the best case scenario for the DNS. Less perfectly dense values cause it to <a href="https://github.com/presidentbeef/dumb-numb-set#less-dense-data">be less efficient</a>. For <em>very</em> sparse values, a Hash/Set is probably a better choice.</p>

<h3>Even Better Space Efficiency</h3>

<p>It may not surprise you to find out I was very interested in minimizing the serialized version of the sparse bit set for sending it over a network. In investigating easy but compact ways of doing so, I realized the Marshal data for Hashes and integers is not very compact, especially for large integers.</p>

<p>Fortunately, there is an existing solution for this scenario called <a href="http://msgpack.org/">MessagePack</a>. For storing 1 million values, serialized size is reduced from 245,565 to 196,378 bytes (20%). The DNS will use MessagePack automatically if it is installed.</p>

<h3>Performance</h3>

<p>Somewhat surprisingly, the DNS is quite fast even when compared to MRI Ruby&#8217;s Hash implementation.</p>

<p>With MRI Ruby 1.9.3p448 (x86_64) and 1 million values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>                           <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="no">Hash</span> <span class="n">add</span> <span class="n">random</span>            <span class="mi">0</span><span class="o">.</span><span class="mi">540000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">560000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">549499</span><span class="p">)</span>
</span><span class='line'><span class="no">DumbNumbSet</span> <span class="n">add</span> <span class="n">random</span>     <span class="mi">0</span><span class="o">.</span><span class="mi">850000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">870000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">864700</span><span class="p">)</span>
</span><span class='line'><span class="no">Hash</span> <span class="n">add</span> <span class="k">in</span> <span class="n">order</span>          <span class="mi">0</span><span class="o">.</span><span class="mi">540000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">560000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">556441</span><span class="p">)</span>
</span><span class='line'><span class="no">DumbNumbSet</span> <span class="n">add</span> <span class="k">in</span> <span class="n">order</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">490000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">490000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">483713</span><span class="p">)</span>
</span><span class='line'><span class="no">Hash</span> <span class="n">add</span> <span class="n">shuffled</span>          <span class="mi">0</span><span class="o">.</span><span class="mi">570000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">590000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">589316</span><span class="p">)</span>
</span><span class='line'><span class="no">DumbNumbSet</span> <span class="n">add</span> <span class="n">shuffled</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">540000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">550000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">538420</span><span class="p">)</span>
</span><span class='line'><span class="no">Hash</span> <span class="n">look</span> <span class="n">up</span>               <span class="mi">0</span><span class="o">.</span><span class="mi">930000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">940000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">940849</span><span class="p">)</span>
</span><span class='line'><span class="no">DNS</span> <span class="n">look</span> <span class="n">up</span>                <span class="mi">0</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">820000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">818728</span><span class="p">)</span>
</span><span class='line'><span class="no">Hash</span> <span class="n">remove</span>                <span class="mi">0</span><span class="o">.</span><span class="mi">980000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">030000</span>   <span class="mi">1</span><span class="o">.</span><span class="mo">010000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">999362</span><span class="p">)</span>
</span><span class='line'><span class="no">DNS</span> <span class="n">remove</span>                 <span class="mi">0</span><span class="o">.</span><span class="mi">950000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">950000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">953170</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only operation slower than a regular Hash is inserting many random values. All other operations are roughly equal.</p>

<h3>Conclusion</h3>

<p>For my specific scenario, a simple custom data structure was just as fast as a built-in data structure, but required significantly less space for the expected use case.</p>

<p>There are other solutions for this type of problem, but it should be noted I only really care about fast insertion, fast membership checks, and compact representation. Additionally, values may be very large, although I attempt to keep them within the Fixnum range for Ruby (i.e. less than 2<sup>62</sup> - 1). This rules out some implementations which require arrays the size of the maximum value!</p>

<p>I also did not want to deal with compression schemes, of which there are quite a few, since my sets were going to be dynamic. I imagine there are very efficient implementations for fixed data sets.</p>

<p><a name="footnote"></a></p>

<h4>Footnote: Integer Size in Ruby</h4>

<p>Integers in 32-bit MRI Ruby only have 30 bits available, and in 64-bit MRI Ruby they only have 62 bits available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p448</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">*</span> <span class="mi">62</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Fixnum</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p448</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">*</span> <span class="mi">63</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Bignum</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoiding SQL Injection in Rails]]></title>
    <link href="https://blog.presidentbeef.com/blog/2013/02/08/avoid-sql-injection-in-rails/"/>
    <updated>2013-02-08T09:45:00-08:00</updated>
    <id>https://blog.presidentbeef.com/blog/2013/02/08/avoid-sql-injection-in-rails</id>
    <content type="html"><![CDATA[<p>SQL injection (SQLi) is any situation in which a user can manipulate a database query in an unintended manner. Consequences of SQL injection vulnerabilites range from data leaks, to authentication bypass, to root access on a database server. In short, it is a very big deal.</p>

<p>Most Rails applications interact with a database through ActiveRecord, the default and convenient Object Relational Mapping (ORM) layer which comes with Rails.
Generally, use of ORMs is safer than not. They can provide abstraction and safety and allow developers to avoid manually building SQL queries. They can embody best practices and prevent careless handling of external input.</p>

<p>Instead of unsafe code like</p>

<pre><code>query = "SELECT * FROM users WHERE name = '#{name}' AND password = '#{password'} LIMIT 1"
results = DB.execute(query)
</code></pre>

<p>You can have safer, simpler code like</p>

<pre><code>User.where(:name =&gt; name, :password =&gt; :password).first
</code></pre>

<p>My impression is many people assume the Rails framework will protect them as long as they avoid the &#8220;obviously dangerous&#8221; methods, like <code>find_by_sql</code>.</p>

<p>Unfortunately, ActiveRecord is unsafe more often than it is safe. It does provide parameterization of queries (the API documentation for which can be <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">found here</a>) for some methods, there are many methods for which it does not. While these methods are not intended to be used with user input, the truth is that has never stopped anyone.</p>

<p>To make it clear how dangerous it can be to use ActiveRecord, consider <a href="http://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-exists-3F">ActiveRecord::FinderMethods#exists?</a> which queries the database and returns <code>true</code> if a matching record exists. The argument can be a primary key (either integer or string, if a string it will be sanitized), an array consisting of a template string and values to safely interpolate, or a hash of column-value pairs (which will be sanitized).</p>

<p>Here is an example of using <code>exists?</code> to determine if a given user exists:</p>

<pre><code>User.exists? params[:user_id]
</code></pre>

<p>This looks harmless, since <code>params[:user_id]</code> is a string, and strings will be sanitized. In fact, the documentation clearly points out not to pass in conditions as strings, because they will be escaped.</p>

<p>However, there is no gaurantee <code>params[:user_id]</code> is a string. An attacker could send a request with <code>?user_id[]=some_attack_string</code>, which Rails will turn into an array <code>["some_attack_string"]</code>. Now the argument is an array, the first element of which is not escaped.</p>

<p>To avoid this problem, the user input should be converted to the expected type:</p>

<pre><code>User.exists? params[:user_id].to_i
</code></pre>

<p>Or use a hash:</p>

<pre><code>User.exists? :id =&gt; params[:user_id]
</code></pre>

<p>This should be the approach for all uses of user input. Do not assume <em>anything</em> about values from external sources or what safety mechanisms a method might have.</p>

<p>While working on <a href="http://brakemanscanner.org/">Brakeman</a>, I thought it would be useful to put together a list of all the unsafe ways one can use ActiveRecord.</p>

<p>To make it easier on myself, I built the list into a Rails application so I could easily test, verify, and record any findings. The source is <a href="https://github.com/presidentbeef/inject-some-sql">available here</a> for those who would like try out the examples. The application is a single page of all the queries and example injections. From there one can submit queries and see the results:</p>

<p><img src="https://blog.presidentbeef.com/images/blog/inject-some-sql.png" alt="Query Example" /></p>

<p>The resulting information is available at <a href="http://rails-sqli.org">rails-sqli.org</a>, including examples of how SQL injection can occur and the resulting queries. This is basically a big list of what <em>not</em> to do when using ActiveRecord. Again, please feel free to <a href="https://github.com/presidentbeef/inject-some-sql">contribute</a> so that the list can be as authoritative as possible and help everyone avoid SQL injection in Rails.</p>
]]></content>
  </entry>
  
</feed>
